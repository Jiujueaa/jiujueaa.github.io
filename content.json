{"meta":{"title":"Jiu jue's blog","subtitle":"","description":"记录学习Crypto的过程","author":"Jiu jue","url":"http://example.com","root":"/"},"pages":[{"title":"友情链接","text":"","path":"link/index.html"}],"posts":[{"title":"BUUCTF-Crypto-Wp 81~90","text":"81 [WUSTCTF2020]大数计算flag等于 wctf2020&#123;Part1-Part2-Part3-Part4&#125; 每一Part都为数的十六进制形式（不需要0x)，并用 &#x27;-&#x27; 连接Part1 = 2020*2019*2018* ... *3*2*1 的前8位Part2 = 520^1314 + 2333^666 的前8位Part3 = 宇宙终极问题的答案 x,y,z绝对值和的前8位Part4 = 见图片附件，计算结果乘上1314 直接算数： part1:38609695part2:67358675part3:17357662part4:683280tips:宇宙终极问题：x^3+y^3+z^3=42解为:x=(-80538738812075974)y=80435758145817515z=12602123297335631 进行编码后得到flag: flag&#123;24d231f-403cfd3-108db5e-a6d10&#125; 82 [网鼎杯 2020 青龙组]you_raise_me_up#!/usr/bin/env python# -*- coding: utf-8 -*-from Crypto.Util.number import *import randomn = 2 ** 512m = random.randint(2, n-1) | 1c = pow(m, bytes_to_long(flag), n)print &#x27;m = &#x27; + str(m)print &#x27;c = &#x27; + str(c)# m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075# c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499 可以看到flag是以公钥的身份加密：c=m^flag mod n 知道c,m,n需要求flag，这就设计到离散对数问题，可用pohlig-hellman算法求解，但是由于手搓代码过于冗长，可以用sagemath中自带的discrete_log求解，代码如下： m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499n=2**512m=Mod(m,n)c=Mod(c,n)discrete_log(c,m) Output: 离散对数问题，详解可见大佬博客讲得很详细，最终得到的数字直接long_to_bytes可出结果： b&#x27;flag&#123;5f95ca93-1594-762d-ed0b-a9139692cb4a&#125;&#x27; 得到flag 83 [MRCTF2020]babyRSAimport sympyimport randomfrom gmpy2 import gcd, invertfrom Crypto.Util.number import getPrime, isPrime, getRandomNBitInteger, bytes_to_long, long_to_bytesfrom z3 import *flag = b&quot;MRCTF&#123;xxxx&#125;&quot;base = 65537def GCD(A): B = 1 for i in range(1, len(A)): B = gcd(A[i-1], A[i]) return Bdef gen_p(): P = [0 for i in range(17)] P[0] = getPrime(128) for i in range(1, 17): P[i] = sympy.nextprime(P[i-1]) print(&quot;P_p :&quot;, P[9]) n = 1 for i in range(17): n *= P[i] p = getPrime(1024) factor = pow(p, base, n) print(&quot;P_factor :&quot;, factor) return sympy.nextprime(p)def gen_q(): sub_Q = getPrime(1024) Q_1 = getPrime(1024) Q_2 = getPrime(1024) Q = sub_Q ** Q_2 % Q_1 print(&quot;Q_1: &quot;, Q_1) print(&quot;Q_2: &quot;, Q_2) print(&quot;sub_Q: &quot;, sub_Q) return sympy.nextprime(Q)if __name__ == &quot;__main__&quot;: _E = base _P = gen_p() _Q = gen_q() assert (gcd(_E, (_P - 1) * (_Q - 1)) == 1) _M = bytes_to_long(flag) _C = pow(_M, _E, _P * _Q) print(&quot;Ciphertext = &quot;, _C)&#x27;&#x27;&#x27;P_p : 206027926847308612719677572554991143421P_factor : 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839Q_1: 103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521Q_2: 151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743sub_Q: 168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651Ciphertext = 1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832&#x27;&#x27;&#x27; q的加密方式较为简单，模运算后nextprime能解出，此题考点为解p的过程，由于n为17个素数相乘，题目给出p[9]的值，可以通过nextprime()和prevprime()进行推导，其中涉及欧拉函数： 𝜙(𝑛_1𝑛_2...𝑛_𝑛)=(𝑛_1−1)(𝑛_2−1)...(𝑛_𝑛−1)算出𝜙(n)对应的欧拉函数值后与base(e)求逆元解p，解密脚本如下: from gmpy2 import *from Crypto.Util.number import *import sympyC= 1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832def gen_q(): Q_1=103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521 Q_2=151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743 sub_Q=168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651 Q =pow(sub_Q,Q_2,Q_1) return sympy.nextprime(Q)def gen_p(): n=1 phin=1 P=[0 for i in range(17)] P[9]=206027926847308612719677572554991143421 P_factor =213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839 for i in range(8,-1,-1): P[i]=sympy.prevprime(P[i+1]) for i in range(10,17): P[i]=sympy.nextprime(P[i-1]) for i in range(17): n*=P[i] for i in range(17): phin*=P[i]-1 d=invert(65537,phin) p=pow(P_factor,d,n) return sympy.nextprime(p)P=gen_p()Q=gen_q()D=invert(65537,(P-1)*(Q-1))M=pow(C,D,P*Q)print(long_to_bytes(M)) output: b&#x27;MRCTF&#123;sti11_@_b@by_qu3st10n&#125;&#x27; 84 救世捷径一个名叫CPU的神秘大陆有26个国家，有些国家之间会有一条无向路，每条路径都有不同的长度和一段神秘代码，救世主尼奥要从国家1出发，赶往国家26拯救大陆，请你帮助救世主选择最短路径，而走过的路的神秘代码连接起来便是flag。 以下是数行数据，每行第一个，第二个数字代表这条路的两个端点国家，第三个数字代表路途长度，最后一个字符串便是神秘代码。路在附件中~ 帮助救世主尼奥吧，他快被吓尿了。。。 1 2 100 FLAG&#123;2 3 87 AFQWE2 4 57 ETKLS2 5 50 WEIVK2 6 51 AWEIW3 7 94 QIECJF3 8 78 QSXKE3 9 85 QWEIH4 13 54 WQOJF4 14 47 KDNVE4 15 98 QISNV5 10 43 AEWJV5 11 32 QWKXF5 12 44 ASJVL6 16 59 ASJXJ6 17 92 QJXNV6 18 39 SCJJF6 23 99 SJVHF7 19 99 WJCNF8 20 96 SKCNG9 20 86 SJXHF10 21 60 SJJCH11 21 57 SJHGG12 22 47 SJCHF14 10 55 EJFHG16 17 59 ASJVH18 12 53 SJFHG18 24 93 SHFVG21 22 33 SJFHB19 25 88 ASHHF20 25 96 SJVHG22 25 23 SJVHJ25 26 75 SDEV&#125; 直接回溯，到26总共就四条路，如下： 1–&gt;2–&gt;3–&gt;7–&gt;19–&gt;25，总路程5431–&gt;2–&gt;3–&gt;8–&gt;20–&gt;25，总路程5321–&gt;2–&gt;3–&gt;9–&gt;20–&gt;25，总路程5291–&gt;2–&gt;5–&gt;12–&gt;22–&gt;25，总路程362 明显最后一条最短，拼接字符后： FLAG&#123;WEIVKASJVLSJCHFSJVHJSDEV&#125; 得到flag","path":"2022/08/16/buuctf-9/"},{"title":"BUUCTF-Crypto-Wp 71~80","text":"71 [AFCTF2018]你能看出这是什么加密么p=0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4fq=0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061e=0x10001c=0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6 BABYRSA,还属于没什么变式的那种，直接解题即可： from gmpy2 import invertfrom Crypto.Util.number import*p=0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4fq=0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061c=0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6n=p*qphi=(p-1)*(q-1)e=65537d=invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m)) 得到flag: afctf&#123;R54_|5_$0_$imp13&#125; 72 [AFCTF2018]可怜的RSA对public.key进行公钥分解得到e和n: from Crypto.PublicKey import RSAfrom gmpy2 import invertfrom Crypto.Util.number import*import base64from Crypto.Cipher import PKCS1_OAEPwith open(&quot;/Users/kaijay/Downloads/attachment (19)/public.key&quot;,&quot;r&quot;)as f: key=RSA.import_key(f.read()) print(&#x27;n=&#x27;,key.n) print(&#x27;e=&#x27;,key.e) n= 79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443e= 65537 由于密文用了base64进行加密，我们先解密再求解明文,解题脚本如下: from Crypto.PublicKey import RSAfrom gmpy2 import invertfrom Crypto.Util.number import*import base64from Crypto.Cipher import PKCS1_OAEPwith open(&quot;/Users/kaijay/Downloads/attachment (19)/public.key&quot;,&quot;r&quot;)as f: key=RSA.import_key(f.read()) print(&#x27;n=&#x27;,key.n) print(&#x27;e=&#x27;,key.e)n=key.ne=key.ep=3133337q=25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939with open(&#x27;/Users/kaijay/Downloads/attachment (19)/flag.enc&#x27;,&#x27;r&#x27;)as i: text=i.read()phi=(p-1)*(q-1)d=int(invert(e,phi))c_bytes = base64.b64decode(text)#base64解码rsa_components = (n, e, d, p, q)#打包密钥arsa = RSA.construct(rsa_components)rsakey = RSA.importKey(arsa.exportKey())rsakey = PKCS1_OAEP.new(rsakey)decrypted = rsakey.decrypt(c_bytes)print(decrypted) 得到flag: afctf&#123;R54_|5_$0_B0rin9&#125; 73 [ACTF新生赛2020]crypto-classic0Cipher: Ygvdmq[lYate[elghqvakl&#125; Hint: 哼，压缩包的密码？这是小Z童鞋的生日吧== 生日是密码，八位数字，直接爆破,由于用fcrackzip爆破的速度过慢，还是用了win里的archpr，结果： Fcrackzip: Archer: 效率差了百来倍 #include&lt;stdio.h&gt;char flag[25] = ***int main()&#123; int i; for(i=0;i&lt;25;i++) &#123; flag[i] -= 3; flag[i] ^= 0x7; printf(&quot;%c&quot;,flag[i]); &#125; return 0; &#125; 最后得到加密脚本,先ascii位移3位，再异或运算，我们直接反着写： #include&lt;stdio.h&gt;char flag[25] = &quot;Ygvdmq[lYate[elghqvakl&#125;&quot;;int main() &#123; int i; for(i=0;i&lt;25;i++) &#123; flag[i] ^= 0x7; flag[i] += 3; printf(&quot;%c&quot;,flag[i]); &#125; return 0; &#125; 最终output： actf&#123;my_naive_encrytion&#125; 得到flag 74 [RoarCTF2019]babyRSA（威尔逊定理）加密脚本关键部分： def myGetPrime(): A= getPrime(513) print(A) B=A-random.randint(1e3,1e5) print(B) return sympy.nextPrime((B!)%A) 这里我们知道： p=(B1!)\\%A1\\\\ q=(B2!)\\%A2威尔逊定理： (A−1)!≡ −1 mod A又因为 B=A-random.randint(1e3,1e5) 所以有: (A−1)(A−2)(A−3)…(B+1)∗(B!)\\%A=−1\\%A\\\\ 可得：\\\\ (A−2)(A−3)…(B+1)∗(B!)\\%A=1\\%A故求 (A−2)(A−3)…(B+1)modA的逆元就能解出p 求解代码: def get_p_q(A,B): tmp = 1 for i in range(B+1,A-1): tmp *= i tmp %= A tmp_inv = invert(tmp,A) result = nextprime(tmp_inv) return result 完整解题： from Crypto.Util.number import*from gmpy2 import invertfrom sympy import*def get_p_q(A,B): tmp = 1 for i in range(B+1,A-1): tmp *= i tmp %= A tmp_inv = invert(tmp,A) result = nextprime(tmp_inv) return resultA1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733e=4097c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428p=get_p_q(A1,B1)q=get_p_q(A2,B2)r=n//p//qphi=(p-1)*(q-1)*(r-1)#由于n=p*q*rd=int(invert(e,phi))m=pow(c,d,n)print(long_to_bytes(m)) output: b&#x27;RoarCTF&#123;wm-CongrAtu1ation4-1t4-ju4t-A-bAby-R4A&#125;&#x27; 得到flag 75 [网鼎杯 2020 青龙组]boom直接用Hex Fiend打开可以得到一段获得flag的方法： Na Na Na Na Play a simple gamepauseclsfirst:this string md5:46e5efe6165a5afb361217446a2dbd01%sGreat next levelGame overThis time:Here are have some formulas3x-y+z=1852x+3y-z=321x+y+z=173input: x = %dinput: y = input : z = Great last level coming...Last time: Kill itx*x+x-7943722218936282=0input x: %lldGreat This is your FLAGflag&#123;%s_%d%d%d_%lld&#125; 先求md5，解一个三元一次方程组，解一个一元二次方程: md5结果： en5oy 解方程: from sympy import *x=Symbol(&#x27;x&#x27;)y=Symbol(&#x27;y&#x27;)z=Symbol(&#x27;z&#x27;)f1=3*x-y+z-185f2=2*x+3*y-z-321f3=x+y+z-173a=solve([f1,f2,f3],[x,y,z])print(a)print(solveset(Eq(x**2+x,7943722218936282), x, domain = S.Reals)) output: &#123;x: 74, y: 68, z: 31&#125;&#123;-89127562, 89127561&#125; 构造flag: flag&#123;en5oy_746831_89127561&#125; 76 [RoarCTF2019]RSAfrom gmpy2 import invertfrom Crypto.Util.number import*p=842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458569q=139916095583110895133596833227506693679306709873174024876891023355860781981175916446323044732913066880786918629089023499311703408489151181886568535621008644997971982182426706592551291084007983387911006261442519635405457077292515085160744169867410973960652081452455371451222265819051559818441257438021073941183c=41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128n=p*qphi=(p-1)*(q-1)e=0x10001d=invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m)) 在线解p,q直接求flag: b&#x27;RoarCTF&#123;wm-l1l1ll1l1l1l111ll&#125;&#x27; 正常解法: 1、通过分析x,y的取值范围.2、枚举x,y从而得到x,y的解3、分析可得q与iroot(n/(x*y),2)的值相接近.从而可以得出p,q的值. 77 [WUSTCTF2020]B@se思路是：base64换+爆破解密 先查找少了谁： s1 =&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;s=&#x27;JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/&#x27;missstr=&#x27;&#x27;for i in s1: if i not in s: missstr+=iprint(missstr) output: ju34 正常字典解密函数： def My_base64_decode(inputs,s): bin_str = [] for i in inputs: if i != &#x27;=&#x27;: x = str ( bin ( s.index ( i ) ) ).replace ( &#x27;0b&#x27;, &#x27;&#x27; ) bin_str.append ( &#x27;&#123;:0&gt;6&#125;&#x27;.format ( x ) ) outputs = &quot;&quot; nums = inputs.count ( &#x27;=&#x27; ) while bin_str: temp_list = bin_str[:4] temp_str = &quot;&quot;.join ( temp_list ) # print(temp_str) if (len ( temp_str ) % 8 != 0): temp_str = temp_str[0:-1 * nums * 2] for i in range ( 0, int ( len ( temp_str ) / 8 ) ): outputs += chr ( int ( temp_str[i * 8:(i + 1) * 8], 2 ) ) bin_str = bin_str[4:] return outputs 直接暴力一点，将所有ju34可能的组合都进行解密: import itertoolsdef My_base64_decode(inputs,s): bin_str = [] for i in inputs: if i != &#x27;=&#x27;: x = str ( bin ( s.index ( i ) ) ).replace ( &#x27;0b&#x27;, &#x27;&#x27; ) bin_str.append ( &#x27;&#123;:0&gt;6&#125;&#x27;.format ( x ) ) outputs = &quot;&quot; nums = inputs.count ( &#x27;=&#x27; ) while bin_str: temp_list = bin_str[:4] temp_str = &quot;&quot;.join ( temp_list ) # print(temp_str) if (len ( temp_str ) % 8 != 0): temp_str = temp_str[0:-1 * nums * 2] for i in range ( 0, int ( len ( temp_str ) / 8 ) ): outputs += chr ( int ( temp_str[i * 8:(i + 1) * 8], 2 ) ) bin_str = bin_str[4:] return outputscipher=&#x27;MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==&#x27;s1 =&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;s=&#x27;JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/&#x27;#查找缺少字符missstr=&#x27;&#x27;for i in s1: if i not in s: missstr+=i#print(missstr)# ju34#列出缺少字符可能的排列组合missstrs=[]for i in itertools.permutations(missstr, 4): missstrs.append(&#x27;&#x27;.join(i))print(missstrs)#列出可能的flagfor i in missstrs: s=&#x27;JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs&#x27;+i+&#x27;kxyz012789+/&#x27; flag=My_base64_decode(cipher,s) print(flag) 得到： wctf2220&#123;bape64_p_v0ry_e@py_and_fuN&#125;wctf2320&#123;bape64_p_v0ry_e@py_and_fuN&#125;wctf2120&#123;bape64_p_v0ry_e@py_and_fuN&#125;wctf2120&#123;bape64_p_v0ry_e@py_and_fuN&#125;wctf2320&#123;bape64_p_v0ry_e@py_and_fuN&#125;wctf2220&#123;bape64_p_v0ry_e@py_and_fuN&#125;wctf2220&#123;baqe64_q_v1ry_e@qy_and_fuN&#125;wctf2320&#123;baqe64_q_v1ry_e@qy_and_fuN&#125;wctf2120&#123;bare64_!r_v2ry_e@ry_and_fuN&#125;wctf2120&#123;base64_1s_v3ry_e@sy_and_fuN&#125;wctf2320&#123;bare64_!r_v2ry_e@ry_and_fuN&#125;wctf2220&#123;base64_1s_v3ry_e@sy_and_fuN&#125;wctf2020&#123;baqe64_q_v1ry_e@qy_and_fuN&#125;wctf2020&#123;baqe64_q_v1ry_e@qy_and_fuN&#125;wctf2020&#123;bare64_!r_v2ry_e@ry_and_fuN&#125;wctf2020&#123;base64_1s_v3ry_e@sy_and_fuN&#125;wctf2020&#123;bare64_!r_v2ry_e@ry_and_fuN&#125;wctf2020&#123;base64_1s_v3ry_e@sy_and_fuN&#125;wctf2320&#123;baqe64_q_v1ry_e@qy_and_fuN&#125;wctf2220&#123;baqe64_q_v1ry_e@qy_and_fuN&#125;wctf2320&#123;bare64_!r_v2ry_e@ry_and_fuN&#125;wctf2220&#123;base64_1s_v3ry_e@sy_and_fuN&#125;wctf2120&#123;bare64_!r_v2ry_e@ry_and_fuN&#125;wctf2120&#123;base64_1s_v3ry_e@sy_and_fuN&#125; Flag: wctf2020&#123;base64_1s_v3ry_e@sy_and_fuN&#125; 78 鸡藕椒盐味公司食堂最新出了一种小吃，叫鸡藕椒盐味汉堡，售价八块钱，为了促销，上面有一个验证码，输入后可以再换取一个汉堡。但是问题是每个验证码几乎都有错误,而且打印的时候倒了一下。小明买到了一个汉堡，准备还原验证码，因为一个吃不饱啊验证码如下：1100 1010 0000 ,而且打印的时候倒了一下。把答案哈希一下就可以提交了。 提取关键词: 鸡藕椒盐味 每个验证码几乎都有错误 打印的时候倒了一下 谐音梗还是比较明显的，奇偶校验位，倒序打印： 1 2 3 4 5 6 7 8 9 10 11 12 位数 0 0 1 0 0 0 1 1 信息位 R1 R2 R3 R4 校验位 0 0 0 0 0 1 0 1 0 0 1 1 原码 海明校验位号 占用的校验位号 校验位 1 1 R1 2 2 R2 3 1、2 R1 R2 4 4 R3 5 1、4 R1 R3 6 2、4 R2 R3 7 1、2、4 R1 R2 R3 8 8 R4 9 1、8 R1 R4 10 2、8 R2 R4 11 1、2、8 R1 R2 R4 12 4、8 R3 R4 可以得到R1 R2 R3 R4分别确定了： R1:3 5 7 9 11 R2:3 6 7 10 11 R3:5 6 7 12 R4:9 10 11 12 求校验码: R1=D3⊕D5⊕D7⊕D9⊕D11=1 R2=D3⊕D6⊕D7⊕D10⊕D11=0 R3=D5⊕D6⊕D7⊕D12=0 R4=D9⊕D10⊕D11⊕D12=0 得到校验码为： 1 2 3 4 位数 1 0 0 0 计算出来的校验码 0 0 0 1 给出的校验码 可以发现两个校验码异或结果并不是0000而是1001，1001对应第九位，这里说明了第九位出了问题，修正后倒序输出我们得到: 1101 1010 0000 进行哈希运算(无空格): d14084c7ceca6359eaac6df3c234dd3b 得到flag 79 [AFCTF2018]SingleJmqrida rva Lfmz (JRL) eu m uqajemf seny xl enlxdomrexn uajiderc jxoqarerexnu. Rvada mda rvdaa jxooxn rcqau xl JRLu: Paxqmdyc, Mrrmjs-Yalanja mny oekay.Paxqmdyc-urcfa JRLu vmu m jxiqfa xl giaurexnu (rmusu) en dmnza xl jmrazxdeau. Lxd akmoqfa, Wab, Lxdanuej, Jdcqrx, Benmdc xd uxoarvenz afua. Ramo jmn zmen uxoa qxenru lxd atadc uxftay rmus. Oxda qxenru lxd oxda jxoqfejmray rmusu iuimffc. Rva nakr rmus en jvmen jmn ba xqanay xnfc mlrad uxoa ramo uxfta qdatexiu rmus. Rvan rva zmoa reoa eu xtad uio xl qxenru uvxwu cxi m JRL wenad. Lmoxiu akmoqfa xl uijv JRL eu Yaljxn JRL gimfu.Waff, mrrmjs-yalanja eu mnxrvad enradaurenz seny xl jxoqarerexnu. Vada atadc ramo vmu xwn narwxds(xd xnfc xna vxur) werv tifnmdmbfa uadtejau. Cxid ramo vmu reoa lxd qmrjvenz cxid uadtejau mny yatafxqenz akqfxeru iuimffc. Ux, rvan xdzmnehadu jxnnajru qmdrejeqmnru xl jxoqarerexn mny rva wmdzmoa urmdru! Cxi uvxify qdxrajr xwn uadtejau lxd yalanja qxenru mny vmjs xqqxnanru lxd mrrmjs qxenru. Veurxdejmffc rveu eu m ledur rcqa xl JRLu, atadcbxyc snxwu mbxir YAL JXN JRL - uxoarvenz fesa m Wxdfy Jiq xl mff xrvad jxoqarerexnu.Oekay jxoqarerexnu omc tmdc qxuuebfa lxdomru. Er omc ba uxoarvenz fesa wmdzmoa werv uqajemf reoa lxd rmus-bmuay afaoanru (a.z. IJUB eJRL).JRL zmoau xlran rxijv xn omnc xrvad muqajru xl enlxdomrexn uajiderc: jdcqrxzdmqvc, urazx, benmdc mnmfcueu, datadua anzanaadenz, oxbefa uajiderc mny xrvadu. Zxxy ramou zanadmffc vmta urdxnz useffu mny akqadeanja en mff rvaua euuiau.Iuimffc, lfmz eu uxoa urdenz xl dmnyxo ymrm xd rakr en uxoa lxdomr. Akmoqfa mljrl&#123;Xv_I_lxiny_er_neja_rDc&#125; 直接导入https://quipqiup.com/求解： Capture the Flag (CTF) is a special kind of information security competitions. There are three common types of CTFs: Jeopardy, Attack-Defence and mixed. Jeopardy-style CTFs has a couple of questions (tasks) in range of categories. For example, Web, Forensic, Crypto, Binary or something else. Team can gain some points for every solved task. More points for more complicated tasks usually. The next task in chain can be opened only after some team solve previous task. Then the game time is over sum of points shows you a CTF winer. Famous example of such CTF is Defcon CTF quals. Well, attack-defence is another interesting kind of competitions. Here every team has own network(or only one host) with vulnarable services. Your team has time for patching your services and developing exploits usually. So, then organizers connects participants of competition and the wargame starts! You should protect own services for defence points and hack opponents for attack points. Historically this is a first type of CTFs, everybody knows about DEF CON CTF - something like a World Cup of all other competitions. Mixed competitions may vary possible formats. It may be something like wargame with special time for task-based elements (e.g. UCSB iCTF). CTF games often touch on many other aspects of information security: cryptography, stego, binary analysis, reverse engeneering, mobile security and others. Good teams generally have strong skills and experience in all these issues. Usually, flag is some string of random data or text in some format. Example afctf&#123;Oh_U_found_it_nice_tRy&#125; 得到flag: afctf&#123;Oh_U_found_it_nice_tRy&#125; 80 RSA &amp; what（base64隐写)看完加密脚本后我们我们知道题目给了多组c,e1,e2和同一个n,这就要考虑共模攻击了，先上脚本看看输出: import gmpy2from Crypto.Util.number import*n=785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147e1=1697e2=599def rsa_gong_N_def(e1,e2,c1,c2,n):#共模攻击解m e1, e2, c1, c2, n=int(e1),int(e2),int(c1),int(c2),int(n) print(&quot;e1,e2:&quot;,e1,e2) print(gmpy2.gcd(e1,e2)) s = gmpy2.gcdext(e1, e2) print(s) s1 = s[1] s2 = s[2] if s1 &lt; 0: s1 = - s1 c1 = gmpy2.invert(c1, n) elif s2 &lt; 0: s2 = - s2 c2 = gmpy2.invert(c2, n) m = (pow(c1,s1,n) * pow(c2 ,s2 ,n)) % n return int(m)ct1_1 = 412629526163150748619328091306742267675740578011800062477174189782151273970783531227579758540364970485350157944321579108232221072397135934034064481497887079641131808838242743811511451355024436983050572020925065644355566434625618133203024215941534926113892937988520918939061441606915556516246057349589921494351383160036280826024605351878408056180907759973804117263002554923041750587548819746346813966673034182913325507826219961923932100526305289894965216608254252188398580139545189681875824089456195044984585824938384521905334289906422454152976834867304693292466676355760173232407753256256317546190171995276258924613533179898467683358934751999655196790168438343198229183747091108262988777659858609744709324571850262293294975336628234767258858873839342596887193772615000676401522431518310648303975593582965021189182246986957349253156736526071639973844039068996404290548474640668851856078201093335425412842295604919065487301340901573809617549185106072798799159726375235125260509158832996701927878713084753334549129580912412168594170659605421750204835970231909591063407612779337478065175988365401590396247576709343727196106058477166945670117868989025903023998142850338956985816131805349549059377047477131270847579095628384569645636821650ct2_1 = 592169079372093727306100216011395857825646323934289480976073629037543922902098120901138454462177159996376654176248238979132528728327590301098966139983157980612320563496546128644967731000716697705104079039156276714872147463350811303393260622707024952543509891692246246277965823414460326811240048060543656588688604452353899779068825120910282167004715339763187734797180326976132213325054697165320479166356562518029805927741656605174809726397565772271562066078076105491745903986597877400370206718954975288721072048333678609055008135809089304229015364348490924974097403734627265297637171818849461766523691595241613878709865506436588268999163342945070495338153600520537498539457396582804692959296612715752573140296135784933206146091436617979599749774330699946637591406356289409716084034451049094715202196203486088368791744107629271647320273259836915312794297246589501008666299165717722507702866033454215783240025504356157664454861755286285777763585177751796252655008206383024707883077513745863312079349790275094080707502392866946325796914450602264462588722052297430827681750827349094323968337670311272933785838850649376115667223821665435911506351891489985627506615492005617098615432522564204152887767244129985681083657783356557756654335186ct1_2 = 494644347943710545224678831941589086572700792465459558770782213550069709458568349686998660541810166872034041584767487150140111151788221460027897193248273461607411027815984883969396220626358625041781558277804930212654296704055890683796941327712758797770820006623289146990000114915293539639766846910274034245607746230740851938158390562286057002223177609606376329007676845450142537930798148258428701466415483232670659815791064681384406494388237742330786225557303988025468036820082959712050733095860546860468575857084616069132051094882919253745234762029759124776348047587755897123575123506976140900565238840752841856713613368250071926171873213897914794115466890719123299469964019450899291410760762179836946570945555295288184698184555018368687708432612286248476073758067175481771199066581572870175460016017100414479346437034291784837132240891321931601494414908927713208448927221095745802380014441841139882391378410438764884597938773868771896252329517440068673532468372840830510218585255432000690265226016573313570977945083879214961394087065558376158826938257664840570952233832852869328785568175434516247720356520242602299510374317488182738732700078879665745909603766482100138001417023680647717824323143388857817595766172152883484274718248ct2_2 = 373940646416832740878733255707567753033716583448402000789202767511920210382830343955553654111486728333980557319799362514960627879016797491389812007768832730979916230647641872759001906846747977631675704310179448857128160385701185892914523053669366534408863734305635222625590986006420486092550427301086984563126480814987024980594613542978310129247678826691418335300577577527951623696426435497835228167084738007750914270251001921329521479047662848650808989996085600197309361410863238526802127877523767262921515150984998560136647154865791163316503073285223966216441025637452229043510097323724381056976302288136843260163922706692913035222445496716008888946581535004546355744211680390731257309941902587303353139951102244865270295414474488798335404630458489706639805186573874814586736746232358849677477533671968344154242963289415569487579895910660999043578737461300406937828924818002658292769882181668784501439254131996848948120781562158861495883827848139425862249576454689133681009549361314460818658995959098228995702202268649635363105549975932395335076521137604288520082040121286614922986554652700056148966514178935952363036963217619879899671383604638416567950421350546204434902113156720006282720889591288850271076074941927715678306057176ct1_3 = 152942283599728307168144137370127212672611894072038732126041098102628831053000986759260271210671922070555948023688596575415822984026159010574404359474670428678518262175033880513984372909748992727828381694416776740981021730545374002974037896534944567124543272737618380646771071804878796585983783360553761828325817820260204820004421979881871027255562690952334900616675606524933557440263648233514757200263521499508373975003431306847453046714027687108396945719803444444954079308404947126216395526551292104722047878178373207886033071857277857997932255251315982837892164421298202073945919187779856785892717251746704537315003771369737854896595170485152591013676942418134278534037654467840633528916812275267230155352077736583130992587670941654695382287023971261529987384520843829695778029311786431227409189019205818351911572757145556993606643464336196802350204616056286497246016800105003143046120608673496196758720552776772796609670537056331996894322779267635281472481559819839042424017171718303214059720568484939239370144038161541354254182769979771948759413102933987773401644506930205164891773826513161783736386604783484446345744957119469799231796368324927570694496679453313927562345656690240414624431304646248599226046524702364131095964335ct2_3 = 527630926460622936571385649841758214453416849039412401087443444317101857090904711485538107058823056085840539073345920792871368232355475394571098380596835468509997340505604333730547799560998822989747473780307779717715522787724471724766494090783971030594671013168209717686720448579582618378459567979027822271918653169622428153856198907810040224340270362413432495029672123261375400927159831537760709974778708160583252613784358234858583174544777979242887938827573604837766801998381379999076416444683891078093889686055482709838668356120916040352123019019255084513769603803814947774554028717814638951416291274696771515474086351482107953150253616922787262398450376249126999644026382478413080973933173079111305142716133389111399235545279259017424722601848670061556859163943895466553927946412523750166582734005733378328468250568944945912238495877929717101722314678120172228493787964904072583905721074766711732215815561012960394537195757832959268603775112932862105945720853959285187521763557915356428113876893276879775603217718981852114599706699524551973934242045743122744146361596971245034059345915315495232135483464496114770357536576200511490922413208178149869347802988786513451486411409887164516065062084917556120712465074206435831498113605ct1_4 = 79717988936247951265489157583697956031893477858854186991051529161879478488281744062318600470906120960002282886511477294555606503083169449335174864424180701080203993329996226566203834693869525797695969610065991941396723959032680019082506816443041598300477625793433080664346470586416385854692124426348587211026568667694805849554780794033764714016521711467557284846737236374990121316809833819996821592832639024026411520407330206281265390130763948165694574512140518775603040182029818771866749548761938870605590174330887949847420877829240131490902432602005681085180807294176837646062568094875766945890382971790015490163385088144673549085079635083262975154206269679142412897438231719704933258660779310737302680265445437771977749959110744959368586293082016067927548564967400845992380076107522755566531760628823374519718763740378295585535591752887339222947397184116326706799921515431185636740825707782742373783475781052674257292910213843986132987466810027275052416774693363446184518901899202502828670309452622347532932678874990809930682575738653876289384151496807194146308614368821006660626870989784697045160231069428458961107751207771093777394616856305293335603892178327520756554333365975114235981173451368131680404850832773147333013716920ct2_4 = 8786437178698940322877889807009957616777351844979869726962356553244050911283984280960665761649310895230455072977431415102053987735969326553978994853162483051544656873294555116009995592043183070208706258164840540599577072097104139505857517663273929851202628854185356185647194933800084230503413037858893307713037149307477830536758283681093517617820169181420796105338681582230788318108428132051793761014952837330456262272828627355701464740578197966332613127307037255647286823496355917642353327912440019621838870388091824748629637425759125214639885130163183752378908729773517053259212525494555880921052679512582051516604297098204363525081039382358483926727008679327719083138865969291911863630382097160230960738043575559330264018212774424527719153248563876760067931499029384228993253862501939337758514377472011933279273181144830381169849387893799390755052093069179605579485710343655570028592595882436632426527654452895431758715126580164902410286422637215098476316042367916779431052267545769495994723721129943616294879642305545894912914632980455031755879087401575310699765408473606166727137934224515998416625122213056208800095077933103150699272650116151674702438463062734472714004926103668378506804002740045547964716693536349447660850580ct1_5 = 123111353650401158556639983459870663057297871992927053886971224773529636525110628183715748795987525113177540092814119928708272290370336537110381023134637759740716140969662183269370676630325583385284994943164692397459103195434968057377474610500216801375394703781249039351368816958227409657934091741509357152328382960684515093945552479461382281913961956745154260686029997827565075768703774895750561575155143606297116391666385705899138085693913246313778033627210312268959737394553510894720099165193981333775907531107232556909478156441457899797515694348816961762796703443502856101079430585547997496001098926600499728389113862894833789669213630332988693669889340482430613291490613803204484751470676686041002772556117213612152322606737150858116122936539131795111263513114569794532805886643087299918196635113037777138666914296986040549274559835214505300618256105508764026461518876579387159881983544667258537064954616097750399839661065797883103731694314852301848272092388637114950059216922969842082648527035538090054093890365647676119748995243416337805666557501345234056968476142608491830438065401219751688687373709390057521910942736632126729711606256158399963682990881473178216060827021373776598901281958527655543318413664277921492723185984ct2_5 = 205314962204511500352858372254132533167549960825498949618514841570703199264867431580754674275990554478140637041427842111391746883257447120035947621456863890934062044010795443059281736346976175772415034838334682726635263432655537852942177334888025283748611576171534251461847349566505628290587224150869640386437623371249743165260396675220683302142805646368906930575140628610003919131999295855501215111393294818218799982703289304596989070475000081175510085432290264502023736899104746316830742226946395027029820825791831870857382647221322734605026210073093918331247494307555600335550942340526536281372036612138713881098866303169425501998978400008829873080965592009371176208668290074288903681417933657472279670688597862835627506340169978450918788539270346340385928840299573889292189531738082166408734046381423516467694328971385421907314814283489322619386570046183556572383980777277173349209330683424343658179781015072259378576130442222984963071166207642585589822061597282467850868050737957726423713761694231879497037175627546427449730638216214828463003483408928375620315193290871300316930139260521382533279767663839278693750409419493280753368451508802658272220767624766390639285308433607255253282702383762149755935518922075584637512494819ct1_6 = 36869806815936046911848195817405817350259890871483063184373728397968909458432625046025376290214729914038387534731762237978339011724858818860181178811639468996206294711495853807311240013786226884265118119546377272154555615363105236192878292703331473547623021744317034819416624562896226194523639793573028006666236271812390759036235867495803255905843636447252225413871038762657801345647584493917576263471587347202664391908570140389126903204602391093990827188675090199750617303773574821926387194478875191828814971296674530519321530805302667925998711835019806761133078403281404889374663875077339168901297819436499920958268483684335998301056068380228873524800383911402490807139268964095165069610454677558808756444381542173782815227920906224931028457073652453777424387873533280455944646592996920617956675786286711447540353883400282402551158169958389450168079568459656526911857835375748015814860506707921852997096156275804955989964215077733621769938075413007804223217091604613132253046399456747595300404564172224333936405545921819654435437072133387523533568472443532200069133022979195685683508297337961701169394794966256415112246587706103819620428258245999539040721929317130088874161577093962579487428358736401687123174207198251449851429295ct2_6 = 271453634732502613378948161256470991260052778799128789839624515809143527363206813219580098196957510291648493698144497567392065251244844074992734669490296293997386198359280316655904691639367482203210051809125904410431506925238374843856343243276508280641059690938930957474434518308646618959004216831130099873532714372402117796666560677624822509159287675432413016478948594640872091688482149004426363946048517480052906306290126242866034249478040406351940088231081456109195799442996799641647167552689564613346415247906852055588498305665928450828756152103096629274760601528737639415361467941349982213641454967962723875032638267311935042334584913897338553953961877439389588793074211502597238465542889335363559052368180212013206172712561221352833891640659020253527584706465205486408990762759230842192028381048563437724528409174790022752557512795782713125166158329880702730769957185428522011430144840232256419113631679343171680631630775266488738173707357123139368825087043785842169049943237537188129367275730984789479909103397937113837824575137021012333461552176687570010445744268373840742899299977372834041925102853718964831225250407279578465008537542659673685686242773379131904890865110699190451534445434533919127658976874721029586168106207ct1 = []ct2 = []flag = &quot;&quot;for i in range(1,7): ct1.append(eval(&quot;ct1_&quot;+str(i))) ct2.append(eval(&quot;ct2_&quot; + str(i))) flag += str(long_to_bytes(rsa_gong_N_def(e1,e2,ct1[i-1],ct2[i-1],n)))print(flag) VEhJUz== RkxBR3== SVN= SElEREVOLo== Q0FO WU9V RklORM== SVT= T1VUP4== RE8= WU9V S05PV9== QkFTRTY0P5== WW91bmdD VEhJTku= WU9V QVJF Tk9U VEhBVE== RkFNSUxJQVI= V0lUSO== QkFTRTY0Lh== QmFzZTY0 aXO= YW== Z3JvdXA= b2b= c2ltaWxhcn== YmluYXJ5LXRvLXRleHR= ZW5jb2Rpbme= c2NoZW1lc0== dGhhdD== cmVwcmVzZW50 YmluYXJ5 ZGF0YW== aW5= YW6= QVNDSUl= c3RyaW5n Zm9ybWF0 Ynk= dHJhbnNsYXRpbmd= aXS= aW50b1== YT== cmFkaXgtNjQ= cmVwcmVzZW50YXRpb24u VGhl dGVybc== QmFzZTY0 b3JpZ2luYXRlc8== ZnJvbd== YY== c3BlY2lmaWN= TUlNRT== Y29udGVudI== dHJhbnNmZXI= ZW5jb2Rpbmcu VGhl cGFydGljdWxhct== c2V0 b2b= NjR= Y2hhcmFjdGVyc5== Y2hvc2Vu dG+= cmVwcmVzZW50 dGhl NjQ= cGxhY2UtdmFsdWVz Zm9y dGhl YmFzZd== dmFyaWVz YmV0d2Vlbt== aW1wbGVtZW50YXRpb25zLp== VGhl Z2VuZXJhbI== c3RyYXRlZ3n= aXO= dG9= Y2hvb3Nl NjR= Y2hhcmFjdGVyc5== dGhhdA== YXJl Ym90aN== bWVtYmVyc5== b2a= YS== c3Vic2V0 Y29tbW9u dG8= bW9zdM== ZW5jb2RpbmdzLA== YW5k YWxzb8== cHJpbnRhYmxlLg== VGhpc9== Y29tYmluYXRpb25= bGVhdmVz dGhl ZGF0YW== dW5saWtlbHk= dG/= YmV= bW9kaWZpZWS= aW5= dHJhbnNpdE== dGhyb3VnaN== aW5mb3JtYXRpb26= c3lzdGVtcyw= c3VjaN== YXM= RS1tYWlsLD== dGhhdA== d2VyZQ== dHJhZGl0aW9uYWxseQ== bm90 OC1iaXQ= Y2xlYW4uWzFd Rm9y ZXhhbXBsZSw= TUlNRSdz QmFzZTY0 aW1wbGVtZW50YXRpb24= dXNlcw== QahDWiw= YahDeiw= YW5k MKhDOQ== Zm9y dGhl Zmlyc3Q= NjI= dmFsdWVzLg== T3RoZXI= dmFyaWF0aW9ucw== c2hhcmU= dGhpcw== cHJvcGVydHk= YnV0 ZGlmZmVy aW4= dGhl c3ltYm9scw== Y2hvc2Vu Zm9y dGhl bGFzdA== dHdv dmFsdWVzOw== YW4= ZXhhbXBsZQ== aXM= VVRGLTcu 得到这么多段短的base64加密，解码结果告诉我们flag被隐写了，参考大佬blog我们能得到base64隐写原理: 即使将补位的0进行篡改，也不会改变原来的编码结果，这就给我们留下了隐写的空间，直接上脚本破解： from Crypto.Util.number import*import base64c = b&#x27;VEhJUz==\\nRkxBR3==\\nSVN=\\nSElEREVOLo==\\nQ0FO\\nWU9V\\nRklORM==\\nSVT=\\nT1VUP4==\\nRE8=\\nWU9V\\nS05PV9==\\nQkFTRTY0P5==\\nWW91bmdD\\nVEhJTku=\\nWU9V\\nQVJF\\nTk9U\\nVEhBVE==\\nRkFNSUxJQVI=\\nV0lUSO==\\nQkFTRTY0Lh==\\nQmFzZTY0\\naXO=\\nYW==\\nZ3JvdXA=\\nb2b=\\nc2ltaWxhcn==\\nYmluYXJ5LXRvLXRleHR=\\nZW5jb2Rpbme=\\nc2NoZW1lc0==\\ndGhhdD==\\ncmVwcmVzZW50\\nYmluYXJ5\\nZGF0YW==\\naW5=\\nYW6=\\nQVNDSUl=\\nc3RyaW5n\\nZm9ybWF0\\nYnk=\\ndHJhbnNsYXRpbmd=\\naXS=\\naW50b1==\\nYT==\\ncmFkaXgtNjQ=\\ncmVwcmVzZW50YXRpb24u\\nVGhl\\ndGVybc==\\nQmFzZTY0\\nb3JpZ2luYXRlc8==\\nZnJvbd==\\nYY==\\nc3BlY2lmaWN=\\nTUlNRT==\\nY29udGVudI==\\ndHJhbnNmZXI=\\nZW5jb2Rpbmcu\\nVGhl\\ncGFydGljdWxhct==\\nc2V0\\nb2b=\\nNjR=\\nY2hhcmFjdGVyc5==\\nY2hvc2Vu\\ndG+=\\ncmVwcmVzZW50\\ndGhl\\nNjQ=\\ncGxhY2UtdmFsdWVz\\nZm9y\\ndGhl\\nYmFzZd==\\ndmFyaWVz\\nYmV0d2Vlbt==\\naW1wbGVtZW50YXRpb25zLp==\\nVGhl\\nZ2VuZXJhbI==\\nc3RyYXRlZ3n=\\naXO=\\ndG9=\\nY2hvb3Nl\\nNjR=\\nY2hhcmFjdGVyc5==\\ndGhhdA==\\nYXJl\\nYm90aN==\\nbWVtYmVyc5==\\nb2a=\\nYS==\\nc3Vic2V0\\nY29tbW9u\\ndG8=\\nbW9zdM==\\nZW5jb2RpbmdzLA==\\nYW5k\\nYWxzb8==\\ncHJpbnRhYmxlLg==\\nVGhpc9==\\nY29tYmluYXRpb25=\\nbGVhdmVz\\ndGhl\\nZGF0YW==\\ndW5saWtlbHk=\\ndG/=\\nYmV=\\nbW9kaWZpZWS=\\naW5=\\ndHJhbnNpdE==\\ndGhyb3VnaN==\\naW5mb3JtYXRpb26=\\nc3lzdGVtcyw=\\nc3VjaN==\\nYXM=\\nRS1tYWlsLD==\\ndGhhdA==\\nd2VyZQ==\\ndHJhZGl0aW9uYWxseQ==\\nbm90\\nOC1iaXQ=\\nY2xlYW4uWzFd\\nRm9y\\nZXhhbXBsZSw=\\nTUlNRSdz\\nQmFzZTY0\\naW1wbGVtZW50YXRpb24=\\ndXNlcw==\\nQahDWiw=\\nYahDeiw=\\nYW5k\\nMKhDOQ==\\nZm9y\\ndGhl\\nZmlyc3Q=\\nNjI=\\ndmFsdWVzLg==\\nT3RoZXI=\\ndmFyaWF0aW9ucw==\\nc2hhcmU=\\ndGhpcw==\\ncHJvcGVydHk=\\nYnV0\\nZGlmZmVy\\naW4=\\ndGhl\\nc3ltYm9scw==\\nY2hvc2Vu\\nZm9y\\ndGhl\\nbGFzdA==\\ndHdv\\ndmFsdWVzOw==\\nYW4=\\nZXhhbXBsZQ==\\naXM=\\nVVRGLTcu&#x27;def get_base64_diff_value(s1, s2): base64chars = b&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27; res = 0 for i in range(len(s2)): if s1[i] != s2[i]: return abs(base64chars.index(s1[i]) - base64chars.index(s2[i])) return resdef solve_stego(): line=b&#x27;&#x27; bin_str=&#x27;&#x27; for i in c: k=long_to_bytes(i) if k==b&#x27;\\n&#x27;: steg_line = line norm_line = base64.b64encode(base64.b64decode(line)) diff = get_base64_diff_value(steg_line, norm_line) #print(diff) pads_num = steg_line.count(b&#x27;=&#x27;) if diff: bin_str += bin(diff)[2:].zfill(pads_num * 2) else: bin_str += &#x27;0&#x27; * pads_num * 2 print(goflag(bin_str)) line=b&#x27;&#x27; continue line+=kdef goflag(bin_str): res_str = &#x27;&#x27; for i in range(0, len(bin_str), 8): res_str += chr(int(bin_str[i:i + 8], 2)) return res_strif __name__ == &#x27;__main__&#x27;: solve_stego() Output: 777777c7c7c87c87c87c87c867c867c867c867c867c867c86d7c86d7c86d7c86d87c86d87c86d87c86d8f7c86d8f7c86d8f7c86d8f77c86d8f77c86d8f77c86d8f7d7c86d8f7d7c86d8f7d7c86d8f7d7c86d8f7d67c86d8f7d67c86d8f7d67c86d8f7d67c86d8f7d67c86d8f7d67c86d8f7d6d7c86d8f7d6d7c86d8f7d6d7c86d8f7d6de7c86d8f7d6de7c86d8f7d6de7c86d8f7d6de7c86d8f7d6de7c86d8f7d6de37c86d8f7d6de37c86d8f7d6de37c86d8f7d6de337c86d8f7d6de337c86d8f7d6de33a7c86d8f7d6de33a7c86d8f7d6de33a87c86d8f7d6de33a87c86d8f7d6de33a87c86d8f7d6de33a87c86d8f7d6de33a87c86d8f7d6de33a87c86d8f7d6de33a877c86d8f7d6de33a877c86d8f7d6de33a877c86d8f7d6de33a877c86d8f7d6de33a87f7c86d8f7d6de33a87f7c86d8f7d6de33a87f7c86d8f7d6de33a87f7c86d8f7d6de33a87f7c86d8f7d6de33a87f7c86d8f7d6de33a87f7c86d8f7d6de33a87f7c86d8f7d6de33a87f7c86d8f7d6de33a87f77c86d8f7d6de33a87f77c86d8f7d6de33a87f77c86d8f7d6de33a87f7f7c86d8f7d6de33a87f7f7c86d8f7d6de33a87f7f7c86d8f7d6de33a87f7f97c86d8f7d6de33a87f7f97c86d8f7d6de33a87f7f97c86d8f7d6de33a87f7f97c86d8f7d6de33a87f7f9d7c86d8f7d6de33a87f7f9d7c86d8f7d6de33a87f7f9d7c86d8f7d6de33a87f7f9d67c86d8f7d6de33a87f7f9d67c86d8f7d6de33a87f7f9d6b7c86d8f7d6de33a87f7f9d6b7c86d8f7d6de33a87f7f9d6b7c86d8f7d6de33a87f7f9d6b7c86d8f7d6de33a87f7f9d6b7c86d8f7d6de33a87f7f9d6b07c86d8f7d6de33a87f7f9d6b07c86d8f7d6de33a87f7f9d6b07c86d8f7d6de33a87f7f9d6b007c86d8f7d6de33a87f7f9d6b007c86d8f7d6de33a87f7f9d6b0057c86d8f7d6de33a87f7f9d6b0057c86d8f7d6de33a87f7f9d6b0057c86d8f7d6de33a87f7f9d6b0057c86d8f7d6de33a87f7f9d6b0057c86d8f7d6de33a87f7f9d6b005c7c86d8f7d6de33a87f7f9d6b005c7c86d8f7d6de33a87f7f9d6b005c7c86d8f7d6de33a87f7f9d6b005c7c86d8f7d6de33a87f7f9d6b005ce7c86d8f7d6de33a87f7f9d6b005ce7c86d8f7d6de33a87f7f9d6b005ce67c86d8f7d6de33a87f7f9d6b005ce67c86d8f7d6de33a87f7f9d6b005ce67c86d8f7d6de33a87f7f9d6b005ce647c86d8f7d6de33a87f7f9d6b005ce647c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce6407c86d8f7d6de33a87f7f9d6b005ce640 得到隐写段: 7c86d8f7d6de33a87f7f9d6b005ce640 得到flag","path":"2022/08/16/buuctf-8/"},{"title":"BUUCTF-Crypto-Wp 61~70","text":"61 [GWCTF 2019]BabyRSA给了N和m1,m2，flag被拆成f1与f2，其中m1和m2分别为f1+f2与f1\\^3+f2^3,解方程能解出f1,f2，转换成字符串拼接一下就是原flag了，以下为加密文件： import hashlibimport sympyfrom Crypto.Util.number import *flag = &#x27;GWHT&#123;******&#125;&#x27;secret = &#x27;******&#x27;assert(len(flag) == 38)half = len(flag) / 2flag1 = flag[:half]flag2 = flag[half:]secret_num = getPrime(1024) * bytes_to_long(secret)p = sympy.nextprime(secret_num)q = sympy.nextprime(p)N = p * qe = 0x10001F1 = bytes_to_long(flag1)F2 = bytes_to_long(flag2)c1 = F1 + F2c2 = pow(F1, 3) + pow(F2, 3)assert(c2 &lt; N)m1 = pow(c1, e, N)m2 = pow(c2, e, N)output = open(&#x27;secret&#x27;, &#x27;w&#x27;)output.write(&#x27;N=&#x27; + str(N) + &#x27;\\n&#x27;)output.write(&#x27;m1=&#x27; + str(m1) + &#x27;\\n&#x27;)output.write(&#x27;m2=&#x27; + str(m2) + &#x27;\\n&#x27;)output.close() p和q通过在线工具解出来，反推c1和c2后解方程，最后拼接，解题脚本如下: import gmpy2from Crypto.Util.number import *from sympy import *from sympy.abc import a,b,c N=636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163m1=90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239m2=487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546p= 797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377748737q= 797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377747699e=0x10001phi=(p-1)*(q-1)d=gmpy2.invert(e,phi)c1=pow(m1,d,N)c2=pow(m2,d,N)aa=solve([a+b-c1,pow(a,3)+pow(b,3)-c2],[a,b])print(aa)f1=1141553212031156130619789508463772513350070909f2=1590956290598033029862556611630426044507841845print(long_to_bytes(f2)+long_to_bytes(f1)) Output: b&#x27;GWHT&#123;f709e0e2cfe7e530ca8972959a1033b2&#125;&#x27; 得到flag 62 一张谍报 分析一下两端文字的内容，很容易发现这是个自定义的替换密码，写脚本解密: str1=&#x27;今天上午，朝歌区梆子公司决定，在每天三更天不亮免费在各大小区门口设卡为全城提供二次震耳欲聋的敲更提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的符号是前进。为此，全区老人都蹲在该公司东边树丛合力抵制，不给公司人员放行，场面混乱。李罗鹰住进朝歌区五十年了，人称老鹰头，几年孙子李虎南刚从东北当猎户回来，每月还寄回来几块鼹鼠干。李罗鹰当年遇到的老婆是朝歌一枝花，所以李南虎是长得非常秀气的一个汉子。李罗鹰表示：无论梆子公司做的对错，反正不能打扰他孙子睡觉，子曰：‘睡觉乃人之常情’。梆子公司这是连菩萨睡觉都不放过啊。李南虎表示：梆子公司智商捉急，小心居民猴急跳墙！这三伏天都不给睡觉，这不扯淡么！到了中午人群仍未离散，更有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李南虎仍旧表示爷爷年纪大了，睡不好对身体不好。&#x27;str2=&#x27;喵天上午，汪歌区哞叽公司决定，在每天八哇天不全免费在各大小区门脑设卡为全城提供双次震耳欲聋的敲哇提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的编号是前进。为此，全区眠人都足在该公司流边草丛合力抵制，不给公司人员放行，场面混乱。李罗鸟住进汪歌区五十年了，人称眠鸟顶，几年孙叽李熬值刚从流北当屁户回来，每月还寄回来几块报信干。李罗鸟当年遇到的眠婆是汪歌一枝花，所以李值熬是长得非常秀气的一个汉叽。李罗鸟表示：无论哞叽公司做的对错，反正不能打扰他孙叽睡觉，叽叶：‘睡觉乃人之常情’。哞叽公司这是连衣服睡觉都不放过啊。李值熬表示：哞叽公司智商捉急，小心居民猴急跳墙！这八伏天都不给睡觉，这不扯淡么！到了中午人群仍未离散，哇有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李值熬仍旧表示爷爷年纪大了，睡不好对身体不好。&#x27;str3=&#x27;喵汪哞叽双哇顶，眠鸟足屁流脑，八哇报信断流脑全叽，眠鸟进北脑上草，八枝遇孙叽，孙叽对熬编叶：值天衣服放鸟捉猴顶。鸟对：北汪罗汉伏熬乱天门。合编放行，卡编扯呼。人离烧草，报信归洞，孙叽找爷爷。&#x27;flag=&#x27;&#x27;for i in range(len(str3)): for j in range(len(str2)): if str3[i]==str2[j]: flag+=str1[j] breakprint(flag) Output: 今朝梆子二更头，老鹰蹲猎东口，三更鼹鼠断东口亮子，老鹰进北口上树，三枝遇孙子，孙子对虎符曰：南天菩萨放鹰捉猴头。鹰对：北朝罗汉伏虎乱天门。合符放行，卡符扯呼。人离烧树，鼹鼠归洞，孙子找爷爷。 得到flag： 南天菩萨放鹰捉猴头 63 SameMod一道共模攻击的题目，直接进行一个脚本的写: import gmpy2from Crypto.Util.number import*c1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349n=6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249e1=773c2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535e2=839def rsa_gong_N_def(e1,e2,c1,c2,n):#共模攻击解m e1, e2, c1, c2, n=int(e1),int(e2),int(c1),int(c2),int(n) print(&quot;e1,e2:&quot;,e1,e2) print(gmpy2.gcd(e1,e2)) s = gmpy2.gcdext(e1, e2) print(s) s1 = s[1] s2 = s[2] if s1 &lt; 0: s1 = - s1 c1 = gmpy2.invert(c1, n) elif s2 &lt; 0: s2 = - s2 c2 = gmpy2.invert(c2, n) m = (pow(c1,s1,n) * pow(c2 ,s2 ,n)) % n return int(m) m = rsa_gong_N_def(e1,e2,c1,c2,n)# print(long_to_bytes(m))#正整数转bytes字符串输出str1=str(m)flag=&#x27;&#x27;i=0while i &lt; len(str1): if str1[i]==&#x27;1&#x27;: c=chr(int(str1[i:i+3])) i+=3 else: c=chr(int(str1[i:i+2])) i+=2 flag+=cprint(flag)#long类型拆分转ascii 一开始想直接long_to_bytes求flag，发现好像行不通，后来尝试用ascii解后得到flag： flag&#123;whenwethinkitispossible&#125; 64 [ACTF新生赛2020]crypto-rsa3n=177606504836499246970959030226871608885969321778211051080524634084516973331441644993898029573612290095853069264036530459253652875586267946877831055147546910227100566496658148381834683037366134553848011903251252726474047661274223137727688689535823533046778793131902143444408735610821167838717488859902242863683c=1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049e=65537 给了n,c,e，在线工具拆n，直接解： from gmpy2 import invertfrom Crypto.Util.number import*n=177606504836499246970959030226871608885969321778211051080524634084516973331441644993898029573612290095853069264036530459253652875586267946877831055147546910227100566496658148381834683037366134553848011903251252726474047661274223137727688689535823533046778793131902143444408735610821167838717488859902242863683p=13326909050357447643526585836833969378078147057723054701432842192988717649385731430095055622303549577233495793715580004801634268505725255565021519817179231q=13326909050357447643526585836833969378078147057723054701432842192988717649385731430095055622303549577233495793715580004801634268505725255565021519817179293c=1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049phi=(p-1)*(q-1)e=65537d=invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m)) Output: b&#x27;actf&#123;p_and_q_should_not_be_so_close_in_value&#125;&#x27; 得到flag 65 [NPUCTF2020]这是什么觅🐎附件用Hex Fiend打开后： 看到这是zip的前缀，内含文件flag.jpg: 日历底部有一串文字： F1 W1 S22 S21 T12 S11 W1 S13 其中字母对应的应该是星期几，由于有两个T和S，所以用1和2来区别，那么对着表解就有： 密文 日期 解码 F1 3 c W1 1 a S22 12 l S21 5 e T12 14 n S11 4 d W1 1 a S13 18 r 日期对应的是二十六个字母的序号，故解码得到： calendar 得到flag 66 浪里淘沙tonightsuccessnoticenoticewewesuccesstonightweexamplecryptoshouldwebackspacetonightbackspaceexamplelearnwesublimlearnbackspacetheshouldwelearnfoundsublimsystemexamplesublimfoundlearnshouldmorningsublimsystemuserlearnthecryptomorningexamplenoticetonightlearntonightlearntonightsublimenterusermorningfoundtonightweenterfoundnoticethecryptomorningthebackspacelearntonightlearnsublimtonightlearnfoundenterfoundsuccesstonightsuccessuserfoundmorningtonighttheshouldsublimentertonightenterbackspacelearnexamplenoticeexamplefoundsystemsuccesssublimsuccessshouldtonightcryptowelearncryptofoundshouldsublimsublimweentertonightsuccessshouldentertheentercryptouserbackspaceshouldentersystemsuccesssystementerfoundenterlearnexampletonightnoticemorningusertonightlearnmorningtonightfoundfoundsuccessnoticesystementerlearnexamplebackspaceshouldcryptocryptosublimweexampletonighttheshouldthemorningbackspacelearntonightsystemsuccesssuccessbackspacemorningnoticeuserfoundfoundtonightmorningenterenterthefoundbackspacelearnenterentershouldthesystemfounduserlearnlearnsystemnoticetonighttheshouldlearnuserbackspaceweusernoticeshouldthewefoundsystemwecryptocryptowethebackspacesystementershouldtonightsystemnoticemorningsystemweentermorningfoundsuccessusertonightsuccesstonightbackspaceshouldweenterthewesystemusernoticesystemthelearnexamplelearnfoundlearnnoticeexamplesystemthecryptocryptolearnsystemthecryptoenterlearnexamplemorningmorningweenterentersuccessexampleuserthebackspacenoticesublimenterbackspacesuccessbackspacethesublimexamplesystemtheexamplecryptolearnuserexamplelearnsystemusersuccessenterentersuccesstheuserbackspacelearnsuccessbackspacethesublimshouldwebackspaceexamplesuccesssuccesstonightweusershouldsuccessmorningcryptomorningfoundbackspacesublimshouldentershouldnoticesuccessmorningsuccessexamplelearnshouldsublimlearntonightshoulduserbackspacesublimlearncryptosuccessenternoticetonightmorningtonightwesuccessweuserbackspaceexamplewesystemnoticemorningsystemmorningcryptolearnsystemthethefoundcryptouserlearnusersystemwemorningenterexampleshouldlearncryptofoundenterbackspacelearnenterenterbackspaceshouldbackspacetheshouldthesystemshouldshouldsuccessmorningthefoundsystementersystemtonightcryptowelearnexampleexamplesystementerbackspaceshouldtheentersublimtonightfoundfoundsuccesssuccesssystemsublimcryptoshouldentersublimmorninglearnfoundtonightcryptobackspacesuccesscryptowebackspacefoundshouldnoticeshouldmorningnoticesystemcryptosystemlearnsystemnoticemorningsystementerwemorninglearnsuccessfoundwesuccesswetheusercryptousernoticebackspacesuccessshouldtonightmorningentermorninguserenternoticefoundmorningwetonightsystemthecryptotonightcryptosystemuserthefoundexampletonightusersystemcryptosublimmorninguserthefoundbackspaceshouldsuccesscryptotonightsystemnoticebackspaceusershouldenterthecryptomorningwesublimnoticesuccessnoticeusersuccesstonightlearnweuserenterfounduserexampleshouldshouldtonightwelearnthenoticethewefoundmorningexampleshouldexamplethesuccessnoticeenterfoundthecryptonoticeuserlearnuserweenterfoundmorningsystemweexamplenoticethebackspaceexamplesublimtheusermorningtonightthesuccesscryptosuccessusersuccesstonighttonightwelearnenterenterthemorningentersystemcryptobackspacemorningsystemexamplecryptouserexamplelearnsublimsuccessusersystemfoundmorningshouldcryptotonightsublimtheexamplemorningsystemuserexampleweexamplenoticesuccesssublimnoticecryptoshouldbackspaceshouldthetonightfoundsublimbackspacebackspacetonightshouldbackspacesuccesstonightbackspacesuccessmorningsystemcryptobackspaceentertonighttonightnoticelearnshoulduserfoundexamplesystemthesuccessweusertonightcryptousernoticeenternoticebackspaceusersystemfoundusernoticeshouldlearnuserfoundexampleusermorningshouldsuccessmorningmorningexampleexamplefoundsublimfoundenterbackspacenoticelearnfoundmorningcryptonoticecryptoshouldweshouldtonightcryptobackspacesublimcryptosublimenterentersublimentercryptonoticethethesublimexampleenterentershouldlearncryptoentershouldmorninglearnnoticeuserexamplesublimtonightshouldfoundtonightsuccessshouldmorningfoundtheweuserlearnsublimsystembackspacecryptotheusertonightcryptosublimmorningmorningexamplenoticetheenterlearnshouldmorningsublimfoundtonightsublimsublimexamplefounduserexamplethefoundwemorningnoticefoundcryptosuccesssublimsublimexamplethesuccessexamplenoticesuccessbackspacesublimlearnuserexamplesuccesssuccesssystemsuccessmorningmorninglearnexamplemorningtonightfoundbackspaceenternoticemorningentersuccessmorningusermorningbackspacelearncryptoenteruserenteruserthetonighttonightsuccesslearnenterfoundsuccesssystemfoundbackspaceenterlearnsystemsublimcryptoentermorningwetonightshouldlearnenterfoundcryptonoticelearnlearnshouldfoundsuccessexampletonightthesuccessfoundusertonightenterfoundsuccessshouldmorningusernoticemorningsystemsystemsuccessshouldwelearnenterfoundexamplewethefoundweshouldsystemsystemmorningmorningbackspaceshouldentersublimentertonightsuccesssystemsystemcryptousershouldsublimfoundwetonightnoticeexamplewewesuccessfoundusertonightfoundsystemexamplecryptofoundshouldshouldsuccessenterbackspaceexampletonightthelearnnoticeuserlearnsystemsublimfoundlearnsuccesssystemshouldsublimnoticelearnsystemnoticetonightexamplefoundusernoticeenterlearnnoticecryptousersystemmorningthewesystemfoundfoundshouldsystementerenterbackspacesystemsublimcryptousermorninglearnlearntonightsublimlearnenterenterbackspacesystemuserusercryptoentershouldtheusersublimnoticeexamplemorningexamplesublimsublimbackspacesystemexampleshouldsublimlearnfoundenterbackspacelearnmorningmorningfoundthetonightmorningnoticeenterlearnusersystemtonightbackspaceexamplelearntonightbackspaceweshouldcryptosuccessbackspaceexamplesuccesstheshouldmorninguserbackspacelearnthetheshouldcryptocryptotonightbackspacecryptocryptobackspacebackspacenoticeusertonightentermorningfoundweenterexampleenterfoundusersublimsystemtheexampleexamplesystemsuccessusersublimentermorningbackspacesystemfoundlearnsystemshouldsublimsublimentershouldtheusershouldexampleexampleshouldsuccesswelearnfoundsublimshoulduserweentertonightwenoticesublimsystemlearnshouldfoundsuccessuserentersuccessmorningcryptoenteruserfoundexampletonightlearnexampleexamplefoundlearnsuccesssystembackspacecryptonoticethefoundbackspacelearncryptothelearnlearnexamplesuccessnoticenoticesystemmorningcryptotonightnoticenoticeentersuccesscryptoenterbackspacesublimexampleenterfoundtonightcryptotonightsublimnoticesuccesssublimtheentertonighttheshouldthefoundsystemtonightuserbackspacesuccessshouldwebackspacenoticebackspacebackspacenoticewecryptobackspacebackspaceusertonightlearnsuccessmorningusertonightsuccessshouldbackspacecryptoenterentershouldsublimsystemexamplemorningcryptonoticethesuccessthebackspacenoticelearnsublimlearnsuccesscryptothesuccessenternoticecryptosystemsublimsuccesswebackspaceuserenterlearnuserwewemorningsuccesslearncryptobackspacewecryptosystemlearnenterenteruserexamplefoundsystemcryptousernoticefoundusersublimbackspacewesublimnoticemorningshouldexamplenoticecryptoshouldtonightmorningthefoundsystementerentersystemthecryptobackspacesublimlearnsuccessmorningsublimsystemcryptousersublimwesuccessmorningsublimbackspacecryptobackspacesublimthelearnsuccesssublimlearncryptoweweexamplecryptowenoticelearnfoundbackspacesystemsystemexampleshouldlearnsuccesssublimcryptobackspacetonightbackspacemorningmorningnoticeshouldnoticefoundthetheshouldtheshouldfoundfoundcryptosuccessbackspacesuccessshouldweenternoticeweweshouldmorningfoundusersuccessbackspacewenoticeusersuccessenterenterexamplelearnfoundwetonightusercryptothesublimsublimtonightsuccesslearnbackspacetonightentertonightthesublimnoticewefoundcryptobackspaceenterenterlearnlearntonightexamplesystementersublimnoticecryptoshoulduseruserbackspaceuserwesublimmorningwesystemshouldtonighttheusershouldnoticefoundusernoticeentersublimwethewefoundfoundlearnfoundwecryptosystemexamplemorningcryptocryptosublimtheexamplenoticefoundlearnwelearnmorningtheenterthesystemsublimtonightsuccesssystemlearnshouldenterbackspaceentersuccesssuccessbackspaceexamplenoticeentershouldsublimlearnbackspacetheshouldexamplelearnsystemusersublimbackspacebackspacesuccesswelearntonightexamplewecryptoenterwesystemsystemsublimexamplecryptolearnmorningsublimfoundsublimfoundbackspacefoundtonighttonightnoticesuccesssuccessexampleusersuccesstonightsublimcryptosystemweenterexamplesystemthethenoticesublimtonightbackspacenoticesystemexamplethesuccesstonightmorningsuccesstonightwenoticesublimtonightwelearntonightmorningsublimbackspaceenterthetonightenterwecryptofoundtheenternoticebackspacesuccesswesystemuserexamplebackspaceentersuccesstonightsublimwemorningsuccesssuccesswesublimsuccessnoticesublimfoundlearnlearnweexamplecryptonoticelearnweusershoulduserfoundcryptolearnfoundmorningtonightmorningmorningnoticewecryptowewesuccessfoundsublimweuserentershouldshouldshouldsublimbackspacetonightenterwesublimsuccessshouldfoundthethetonightwecryptoweenterfoundcryptoshouldcryptouseruserfoundentersublimsublimthelearntheshouldnoticebackspacefoundsuccessshouldtonightentermorningsystemmorningtonightwenoticelearnbackspaceexampleusershouldnoticesublimsublimexamplethesuccessnoticesystemmorningnoticecryptosystemsublimcryptosystemsuccessshouldmorningbackspaceshouldmorninglearnnoticenoticeshouldthewewesublimsublimnoticeusersuccessentersystemfoundshouldshouldcryptobackspaceusermorningsystemshouldshouldtonightwesublimuserfoundlearnbackspacethetonightmorningexampleuserthefoundbackspaceshouldtonightcryptocryptofounduserexamplenoticecryptousernoticethenoticeshouldweshouldfoundwemorningcryptosuccesslearnfoundtonightsublimnoticenoticewefoundwewesuccesssublimsublimcryptoweexampletonightsuccessfoundshouldsuccesstonightbackspacesystemshouldwesystemnoticebackspaceusersystembackspacewenoticelearnnoticenoticesuccesslearntonightuserlearnsuccessbackspacesuccesswesystemusercryptonoticethesystemusernoticewethesuccessweshouldfoundshouldcryptomorningtonightwethewesuccesslearntheshouldweexampletonightsuccessnoticenoticemorningfoundmorningfoundusersublimsystemsuccessbackspacesuccessmorninguserthefoundweexamplemorningsublimlearnfoundfoundnoticemorningshouldweuserwemorningexamplesuccesssuccessfoundthetheshouldweusershouldtheshouldexamplenoticefoundsuccesssystemfoundshouldsublimbackspacetonightshouldsystemtonightsuccesslearntonightsystemsublimsuccesscryptobackspacesystemsublimmorningmorningshouldmorninglearnsuccesslearnmorningusermorninglearnexamplecryptoshouldbackspacesublimshouldfoundbackspacesystemsystemweexamplesystemtonightsublimmorningmorninguserfoundcryptolearnbackspaceshouldbackspacenoticesublimfoundthecryptousershouldsuccesssystemsuccessshouldsystembackspacesublimshouldsublimsystembackspaceexampleshouldbackspacesublimnoticelearnsublimuserbackspaceusersublimsuccesssublimuserusernoticeshouldsuccessnoticenoticelearnexamplesystemweexamplesublimbackspacebackspacecryptoshouldusercryptosublimbackspacesublimshouldsystemnoticenoticethesuccesssuccesslearnsystemsublimwenoticelearnusersublimsystemusernoticeuserthesuccesslearnwelearnwenoticecryptolearncryptonoticenoticebackspacecryptothecryptousercryptobackspacesuccesslearnthesystemsuccessthesystemsystemcryptosuccessbackspacesublimlearnsublimcryptobackspacelearnsublimusersublimexamplecryptosublimsystemnoticecryptocryptousertheusernoticebackspacenoticenoticethecryptocryptosystembackspacesublimbackspacecryptocryptobackspacesystemuserthenoticesystemsystemsystemusernoticethecryptouserusersystemtheusercryptoexamplenoticecryptoexamplenoticetheexampleexamplethecryptotheusernoticetheexampleexamplecryptotheexampleexamplethenoticethecryptocryptoexampletheexamplecryptocryptothenoticeexamplecryptonoticetheexampleexampleexamplecryptocryptoexampleexamplethenoticethecryptothethethethethetheexampleexamplethetheexampletheexampletheexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample 密文字典： &#x27;tonight&#x27;,&#x27;success&#x27;,&#x27;notice&#x27;,&#x27;example&#x27;,&#x27;should&#x27;,&#x27;crypto&#x27;,&#x27;backspace&#x27;,&#x27;learn&#x27;,&#x27;found&#x27;,&#x27;morning&#x27;,&#x27;we&#x27;,&#x27;system&#x27;,&#x27;sublim&#x27;,&#x27;the&#x27;,&#x27;user&#x27;,&#x27;enter&#x27; 词频分析: f = open( &#x27;/Users/kaijay/Downloads/浪里淘沙.txt&#x27;, &#x27;r&#x27; ).read()word = [&#x27;tonight&#x27;,&#x27;success&#x27;,&#x27;notice&#x27;,&#x27;example&#x27;,&#x27;should&#x27;,&#x27;crypto&#x27;,&#x27;backspace&#x27;,&#x27;learn&#x27;,&#x27;found&#x27;,&#x27;morning&#x27;,&#x27;we&#x27;,&#x27;system&#x27;,&#x27;sublim&#x27;,&#x27;the&#x27;,&#x27;user&#x27;,&#x27;enter&#x27;]for s in word: print(s,f.count(s)) Output: tonight 117success 138notice 136example 139should 131crypto 141backspace 129learn 134found 125morning 113we 124system 130sublim 132the 140user 133enter 120 排序后: morning tonight enter we found backspace system should sublim user learn notice success example the crypto 拼接4,8,11,15,16位就是: we should learn the crypto 得到flag 67 [BJDCTF2020]easyrsafrom Crypto.Util.number import getPrime,bytes_to_longfrom sympy import Derivativefrom fractions import Fractionfrom secret import flagp=getPrime(1024)q=getPrime(1024)e=65537n=p*qz=Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arth(q),q))m=bytes_to_long(flag)c=pow(m,e,n)print(c,z,n) 对加密脚本中的z分析： z=Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arth(q),q)) z=\\frac{1}{\\frac{1}{1+p^2}}-\\frac{1}{\\frac{1}{1-q^2}}=1+p^2-1+q^2=p^2+q^2同时又因为： n=p*q可以解出p和q 其实p和q也可以直接用在线工具分解n拆出来，直接解： from gmpy2 import invertfrom Crypto.Util.number import*n=15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441p=105909195259921349656664570904199242969110902804477734660927330311460997899731622163728968380757294196277263615386525795293086103142131020215128282050307177125962302515483190468569376643751587606016315185736245896434947691528567696271911398179288329609207435393579332931583829355558784305002360873458907029141q=144564833334456076455156647979862690498796694770100520405218930055633597500009574663803955456004439398699669751249623406199542605271188909145969364476344963078599240058180033000440459281558347909876143313940657252737586803051935392596519226965519859474501391969755712097119163926672753588797180811711004203301c=7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035phi=(p-1)*(q-1)e=65537d=invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m)) Output: b&#x27;BJD&#123;Advanced_mathematics_is_too_hard!!!&#125;&#x27; 得到flag 68 yxx密文： V000 明文： lovelovelovelovelovelovelovelove hex打开： 上脚本异或，没啥好说的: hex1 = &#x27;0A031702 56011511 0A140E0A 1E300E0A 1E300E0A 1E30140C 190D1F10 0E060318&#x27;hex2 = &#x27;6C6F7665 6C6F7665 6C6F7665 6C6F7665 6C6F7665 6C6F7665 6C6F7665 6C6F7665&#x27;def hextobin(hex): bin = &#x27;&#x27; for i in hex: if i == &#x27;0&#x27;: bin += &#x27;0000&#x27; if i == &#x27;1&#x27;: bin += &#x27;0001&#x27; if i == &#x27;2&#x27;: bin += &#x27;0010&#x27; if i == &#x27;3&#x27;: bin += &#x27;0011&#x27; if i == &#x27;4&#x27;: bin += &#x27;0100&#x27; if i == &#x27;5&#x27;: bin += &#x27;0101&#x27; if i == &#x27;6&#x27;: bin += &#x27;0110&#x27; if i == &#x27;7&#x27;: bin += &#x27;0111&#x27; if i == &#x27;8&#x27;: bin += &#x27;1000&#x27; if i == &#x27;9&#x27;: bin += &#x27;1001&#x27; if i == &#x27;A&#x27;: bin += &#x27;1010&#x27; if i == &#x27;B&#x27;: bin += &#x27;1011&#x27; if i == &#x27;C&#x27;: bin += &#x27;1100&#x27; if i == &#x27;D&#x27;: bin += &#x27;1101&#x27; if i == &#x27;E&#x27;: bin += &#x27;1110&#x27; if i == &#x27;F&#x27;: bin += &#x27;1111&#x27; if i == &#x27; &#x27;: pass return binbin1 = hextobin(hex1)bin2 = hextobin(hex2)print(bin1)print(bin2)bin3 = &#x27;&#x27;for i in range(len(bin1)): bin3 += str(int(bin1[i]) ^ int(bin2[i]))print(bin3) 异或结果: 0110011001101100011000010110011100111010011011100110001101110100011001100111101101111000011011110111001001011111011110000110111101110010010111110111100001101111011100100101111101100010011010010111010101100010011010010111010101100010011010010111010101111101 转字符串: flag:nctf&#123;xor_xor_xor_biubiubiu&#125; 得到flag 69 [AFCTF2018]Vigenère维吉尼亚密码，解码后： When in the Course of human events it becomes necessary for one people to dissolve the political bands which have connected them with another and to assume among the powers of the earth, the separate and equal station to which the Laws of Nature and of Nature&#x27;s God entitle them, a decent respect to the opinions of mankind requires that they should declare the causes which impel them to the separation.We hold these truths to be self-evident, that all men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness. — That to secure these rights, Governments are instituted among Men, deriving their just powers from the consent of the governed, — That whenever any Form of Government becomes destructive of these ends, it is the Right of the People to alter or to abolish it, and to institute new Government, laying its foundation on such principles and organizing its powers in such form, as to them shall seem most likely to effect their Safety and Happiness. Prudence, indeed, will dictate that Governments long established should not be changed for light and transient causes; and accordingly all experience hath shewn that mankind are more disposed to suffer, while evils are sufferable than to right themselves by abolishing the forms to which they are accustomed. But when a long train of abuses and usurpations, pursuing invariably the same Object evinces a design to reduce them under absolute Despotism, it is their right, it is their duty, to throw off such Government, and to provide new Guards for their future security. — Such has been the patient sufferance of these Colonies; and such is now the necessity which constrains them to alter their former Systems of Government. The history of the present King of Great Britain is a history of repeated injuries and usurpations, all having in direct object the establishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a candid world.He has refused his Assent to Laws, the most wholesome and necessary for the public good.He has forbidden his Governors to pass Laws of immediate and pressing importance, unless suspended in their operation till his Assent should be obtained; and when so suspended, he has utterly neglected to attend to them.He has refused to pass other Laws for the accommodation of large districts of people, unless those people would relinquish the right of Representation in the Legislature, a right inestimable to them and formidable to tyrants only.He has called together legislative bodies at places unusual, uncomfortable, and distant from the depository of their Public Records, for the sole purpose of fatiguing them into compliance with his measures.He has dissolved Representative Houses repeatedly, for opposing with manly firmness his invasions on the rights of the people.He has refused for a long time, after such dissolutions, to cause others to be elected, whereby the Legislative Powers, incapable of Annihilation, have returned to the People at large for their exercise; the State remaining in the mean time exposed to all the dangers of invasion from without, and convulsions within.He has endeavoured to prevent the population of these States; for that purpose obstructing the Laws for Naturalization of Foreigners; refusing to pass others to encourage their migrations hither, and raising the conditions of new Appropriations of Lands.He has obstructed the Administration of Justice by refusing his Assent to Laws for establishing Judiciary Powers.He has made Judges dependent on his Will alone for the tenure of their offices, and the amount and payment of their salaries.flag is afctf&#123;Whooooooo_U_Gotcha!&#125;He has erected a multitude of New Offices, and sent hither swarms of Officers to harass our people and eat out their substance.He has kept among us, in times of peace, Standing Armies without the Consent of our legislatures.He has affected to render the Military independent of and superior to the Civil Power.He has combined with others to subject us to a jurisdiction foreign to our constitution, and unacknowledged by our laws; giving his Assent to their Acts of pretended Legislation:For quartering large bodies of armed troops among us:For protecting them, by a mock Trial from punishment for any Murders which they should commit on the Inhabitants of these States:For cutting off our Trade with all parts of the world:For imposing Taxes on us without our Consent:For depriving us in many cases, of the benefit of Trial by Jury:For transporting us beyond Seas to be tried for pretended offences:For abolishing the free System of English Laws in a neighbouring Province, establishing therein an Arbitrary government, and enlarging its Boundaries so as to render it at once an example and fit instrument for introducing the same absolute rule into these ColoniesFor taking away our Charters, abolishing our most valuable Laws and altering fundamentally the Forms of our Governments:For suspending our own Legislatures, and declaring themselves invested with power to legislate for us in all cases whatsoever.He has abdicated Government here, by declaring us out of his Protection and waging War against us.He has plundered our seas, ravaged our coasts, burnt our towns, and destroyed the lives of our people.He is at this time transporting large Armies of foreign Mercenaries to compleat the works of death, desolation, and tyranny, already begun with circumstances of Cruelty &amp; Perfidy scarcely paralleled in the most barbarous ages, and totally unworthy the Head of a civilized nation.He has constrained our fellow Citizens taken Captive on the high Seas to bear Arms against their Country, to become the executioners of their friends and Brethren, or to fall themselves by their Hands.He has excited domestic insurrections amongst us, and has endeavoured to bring on the inhabitants of our frontiers, the merciless Indian Savages whose known rule of warfare, is an undistinguished destruction of all ages, sexes and conditions.In every stage of these Oppressions We have Petitioned for Redress in the most humble terms: Our repeated Petitions have been answered only by repeated injury. A Prince, whose character is thus marked by every act which may define a Tyrant, is unfit to be the ruler of a free people.Nor have We been wanting in attentions to our British brethren. We have warned them from time to time of attempts by their legislature to extend an unwarrantable jurisdiction over us. We have reminded them of the circumstances of our emigration and settlement here. We have appealed to their native justice and magnanimity, and we have conjured them by the ties of our common kindred to disavow these usurpations, which would inevitably interrupt our connections and correspondence. They too have been deaf to the voice of justice and of consanguinity. We must, therefore, acquiesce in the necessity, which denounces our Separation, and hold them, as we hold the rest of mankind, Enemies in War, in Peace Friends.We, therefore, the Representatives of the united States of America, in General Congress, Assembled, appealing to the Supreme Judge of the world for the rectitude of our intentions, do, in the Name, and by Authority of the good People of these Colonies, solemnly publish and declare, That these united Colonies are, and of Right ought to be Free and Independent States, that they are Absolved from all Allegiance to the British Crown, and that all political connection between them and the State of Great Britain, is and ought to be totally dissolved; and that as Free and Independent States, they have full Power to levy War, conclude Peace, contract Alliances, establish Commerce, and to do all other Acts and Things which Independent States may of right do. — And for the support of this Declaration, with a firm reliance on the protection of Divine Providence, we mutually pledge to each other our Lives, our Fortunes, and our sacred Honor. 得到独立宣言与flag: flag is afctf&#123;Whooooooo_U_Gotcha!&#125; 70 [NCTF2019]babyRSAfrom Crypto.Util.number import *from flag import flagdef nextPrime(n): n += 2 if n &amp; 1 else 1 while not isPrime(n): n += 2 return np = getPrime(1024)q = nextPrime(p)n = p * qe = 0x10001d = inverse(e, (p-1) * (q-1))c = pow(bytes_to_long(flag.encode()), e, n) 题目只给了c和d，但是（p-1)*(q-1)能解出来，已知p，q为两个相邻的素数，由公式： e*d≡1mod(p-1)*(q-1)\\\\得到\\\\ e*d-1=k*(p-1)*(q-1)又因为ed-q位数为2064位，1024\\1024位素数小于等于2048位，也就是说这里的k相差了不超过16位，上脚本爆破出来： import sympyimport gmpy2e=65537d=19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913ed1 = e*d-1for k in range(pow(2,15),pow(2,16)): if ed1%k == 0: p = sympy.prevprime(gmpy2.iroot(ed1//k,2)[0]) q = sympy.nextprime(p) if (p-1)*(q-1)*k == ed1: breakprint(p)print(q) 得到p和q：解题： from gmpy2 import invertfrom Crypto.Util.number import*p=143193611591752210918770476402384783351740028841763223236102885221839966637073188462808195974548579833368313904083095786906479416347681923731100260359652426441593107755892485944809419189348311956308456459523437459969713060653432909873986596042482699670451716296743727525586437248462432327423361080811225075839q=143193611591752210918770476402384783351740028841763223236102885221839966637073188462808195974548579833368313904083095786906479416347681923731100260359652426441593107755892485944809419189348311956308456459523437459969713060653432909873986596042482699670451716296743727525586437248462432327423361080811225076497c=5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804n=p*qphi=(p-1)*(q-1)e=65537d=invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m)) 得到flag: b&#x27;NCTF&#123;70u2_nn47h_14_v3ry_gOO0000000d&#125;&#x27;","path":"2022/08/16/buuctf-7/"},{"title":"BUUCTF-Crypto-Wp 51~60","text":"51 [NCTF2019]Keyboardooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee 题目内容和键盘有关，给的密文只有26键中第一排的字母，第一排有十个字母，应该是对应九键键盘中的0~9，字母个数应该是九键中对应的第几个字母，简单的替换密码，直接对着键盘就能写出: youaresosmartthatthisisjustapieceofcake 得到flag 52 [BJDCTF2020]RSA题目的输出是：c1=12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120n1=13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037x=381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018c2=979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721n2=12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047 其中x为 pow(294,e,n1) 的输出，可以先暴力枚举将e求出，再用最大公约数法求出p和N： from gmpy2 import gcd,invertfrom Crypto.Util.number import *c1=12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120n1=13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037x=381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018c2=979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721n2=12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047n=[n1,n2]for i in range(100000): if pow(294,i,n1)==x: e=i print(e) for i in range(len(n)): for j in range(i+1,len(n)): if(gcd(n[i],n[j])!=1): print(i,j) N=n[i] p=gcd(n[i],n[j]) print(&#x27;p=&#x27;,p) print(&#x27;n=&#x27;,N)q=N//pphi=(p-1)*(q-1)d=invert(e,phi)m=pow(c1,d,N)print(long_to_bytes(m)) 得到flag： b&#x27;BJD&#123;p_is_common_divisor&#125;&#x27; 53 [MRCTF2020]天干地支+甲子得到得字符串用MRCTF&#123;&#125;包裹一天Eki收到了一封来自Sndav的信，但是他有点迷希望您来解决一下甲戌 甲寅 甲寅 癸卯 己酉 甲寅 辛丑 对应六十甲子顺序表有： 原码 解码 +甲子 Ascii解码 甲戌 11 71 G 甲寅 51 111 o 甲寅 51 111 o 癸卯 40 100 d 己酉 46 106 j 甲寅 51 111 o 辛丑 38 98 b 得到flag： flag&#123;Goodjob&#125; 54 [BJDCTF2020]rsa_output&#123;21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111,2767&#125;&#123;21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111,3659&#125;message1=20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599message2=11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227 题目给出了n,c1,c2,e1,e2，直接采用共模攻击： import gmpy2from Crypto.Util import numberc1=20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599n=21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111e1=2767c2=11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227e2=3659def rsa_gong_N_def(e1,e2,c1,c2,n):#共模攻击解m e1, e2, c1, c2, n=int(e1),int(e2),int(c1),int(c2),int(n) print(&quot;e1,e2:&quot;,e1,e2) print(gmpy2.gcd(e1,e2)) s = gmpy2.gcdext(e1, e2) print(s) s1 = s[1] s2 = s[2] if s1 &lt; 0: s1 = - s1 c1 = gmpy2.invert(c1, n) elif s2 &lt; 0: s2 = - s2 c2 = gmpy2.invert(c2, n) m = (pow(c1,s1,n) * pow(c2 ,s2 ,n)) % n return int(m) m = rsa_gong_N_def(e1,e2,c1,c2,n)print(number.long_to_bytes(m))#正整数转bytes字符串输出 output: e1,e2: 2767 36591(mpz(1), mpz(-201), mpz(152))b&#x27;BJD&#123;r3a_C0mmoN_moD@_4ttack&#125;&#x27; 得到flag 55 RSA4N = 331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004 ccc = 10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242 分析： N1,N2,N3两两互质 c1=m^e mod n1 c2=m^e mod n2 c3=m^e mod n3 当m^e&lt;n1,n2,n3时,所以当m和e足够小时才可以用这个方法 m^e=c1 mod n1 m^e=c2 mod n2 m^e=c3 mod n3 N=n1*n2*n3 N1=N/N1,N2=N/N2,N3=N/N3 根据中国剩余定理： m^e=c1*N1*invert(N1,n1)+c2*N2*invert(N2,n2)+c3*N3*invert(N3,n3) mod N invert(N2,n2)是N2对n2的逆元。 对m^e开e次根就可以求出m。 脚本: from gmpy2 import gcd,invert,irootfrom Crypto.Util.number import *n1=int(&#x27;331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004&#x27;,5)#5进制转10进制c1=int(&#x27;310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243&#x27;,5)n2=int(&#x27;302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114&#x27;,5)c2=int(&#x27;112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344&#x27;,5)n3=int(&#x27;332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323&#x27;,5)c3=int(&#x27;10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242&#x27;,5)n=[n1,n2,n3]c=[c1,c2,c3]N=1e=3for i in n: N=N*i#求N=n1*n2*n3m_e=0for j in range(len(n)): m_e+=c[j]*N//n[j]*invert(N//n[j],n[j])m_e=m_e%Nm, f = iroot(m_e, e)#对m^e开e次方print(long_to_bytes(int(m))) 得到flag： b&#x27;noxCTF&#123;D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!&#125;&#x27; 56 [ACTF新生赛2020]crypto-rsa0附件居然要密码才能打开，hint说是伪加密， 一个zip文件有三个部分组成： 压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志 这是三个头标记，主要看第二个 压缩源文件数据区：50 4B 03 04：这是头文件标记 压缩源文件目录区： 50 4B 01 02：目录中文件文件头标记 3F 00：压缩使用的 pkware 版本14 00：解压文件所需 pkware 版本00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了） 压缩源文件目录结束标志 ：50 4B 05 06：目录结束标记 用Hex Fiend打开zip文件后查找50 4B： 可以看到存在伪加密标志09 00: 将09 00 改成00 00后： 继续用Hex Fiend打开unix可执行文件，得到rsa0.py中输出的p,q,c 正常解密即可： from gmpy2 import invertfrom Crypto.Util.number import *p=9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411q=7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223c=50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350e=65537n=p*qphi=(p-1)*(q-1)d=invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m)) 得到flag： b&#x27;actf&#123;n0w_y0u_see_RSA&#125;&#x27; 很有意思的一道题 57 [BJDCTF2020]signinwelcome to crypto world！！密文：424a447b57653163306d655f74345f424a444354467d 十六进制转字符串后： BJD&#123;We1c0me_t4_BJDCTF&#125; 得到flag 58 [MRCTF2020]vigenere密文与维吉尼亚密码有关，在线解密后： a declaration of the independence of cyberspaceby john perry barlow governments of the industrial world, you weary giants of flesh and steel, i come from cyberspace, the new home of mind. on behalf of the future, i ask you of the past to leave us alone. you are not welcome among us. you have no sovereignty where we gather.we have no elected government, nor are we likely to have one, so i address you with no greater authority than that with which liberty itself always speaks. i declare the global social space we are building to be naturally independent of the tyrannies you seek to impose on us. you have no moral right to rule us nor do you possess any methods of enforcement we have true reason to fear.governments derive their just powers from the consent of the governed. you have neither solicited nor received ours. we did not invite you. you do not know us, nor do you know our world. cyberspace does not lie within your borders. do not think that you can build it, as though it were a public construction project. you cannot. it is an act of nature and it grows itself through our collective actions.you have not engaged in our great and gathering conversation, nor did you create the wealth of our marketplaces. you do not know our culture, our ethics, or the unwritten codes that already provide our society more order than could be obtained by any of your impositions.you claim there are problems among us that you need to solve. you use this claim as an excuse to invade our precincts. many of these problems don&#x27;t exist. where there are real conflicts, where there are wrongs, we will identify them and address them by our means. we are forming our own social contract. this governance will arise according to the conditions of our world, not yours. our world is different.cyberspace consists of transactions, relationships, and thought itself, arrayed like a standing wave in the web of our communications. ours is a world that is both everywhere and nowhere, but it is not where bodies live.we are creating a world that all may enter without privilege or prejudice accorded by race, economic power, military force, or station of birth.we are creating a world where anyone, anywhere may express his or her beliefs, no matter how singular, without fear of being coerced into silence or conformity.your legal concepts of property, expression, identity, movement, and context do not apply to us. they are all based on matter, and there is no matter here.our identities have no bodies, so, unlike you, we cannot obtain order by physical coercion. we believe that from ethics, enlightened self-interest, and the commonweal, our governance will emerge. our identities may be distributed across many of your jurisdictions. the only law that all our constituent cultures would generally recognize is the golden rule. we hope we will be able to build our particular solutions on that basis. but we cannot accept the solutions you are attempting to impose.in the united states, you have today created a law, the telecommunications reform act, which repudiates your own constitution and insults the dreams of jefferson, washington, mill, madison, detoqueville, and brandeis. these dreams must now be born anew in us.you are terrified of your own children, since they are natives in a world where you will always be immigrants. because you fear them, you entrust your bureaucracies with the parental responsibilities you are too cowardly to confront yourselves. in our world, all the sentiments and expressions of humanity, from the debasing to the angelic, are parts of a seamless whole, the global conversation of bits. we cannot separate the air that chokes from the air upon which wings beat.in china, germany, france, russia, singapore, italy and the united states, you are trying to ward off the virus of liberty by erecting guard posts at the frontiers of cyberspace. these may keep out the contagion for a small time, but they will not work in a world that will soon be blanketed in bit-bearing media.your increasingly obsolete information industries would perpetuate themselves by proposing laws, in america and elsewhere, that claim to own speech itself throughout the world. these laws would declare ideas to be another industrial product, no more noble than pig iron. in our world, whatever the human mind may create can be reproduced and distributed infinitely at no cost. the global conveyance of thought no longer requires your factories to accomplish.these increasingly hostile and colonial measures place us in the same position as those previous lovers of freedom and self-determination who had to reject the authorities of distant, uninformed powers. we must declare our virtual selves immune to your sovereignty, even as we continue to consent to your rule over our bodies. we will spread ourselves across the planet so that no one can arrest our thoughts.we will create a civilization of the mind in cyberspace. may it be more humane and fair than the world your governments have made before.flag is mrctf vigenere crypto crack man, please add underscore and curly braces. 得到flag： mrctf&#123;vigenere_crypto_crack_man&#125; 59 [MRCTF2020]keyboard得到的flag用MRCTF&#123;xxxxxx&#125;形式上叫都为小写字母6 666 22 444 555 33 7 44 666 66 3 我的评价是：不如#51 mobilephone 60 [WUSTCTF2020]babyrsac = 28767758880940662779934612526152562406674613203406706867456395986985664083182n = 73069886771625642807435783661014062604264768481735145873508846925735521695159e = 65537 在线工具解p和q，直接上脚本： import gmpy2from Crypto.Util.number import *n=73069886771625642807435783661014062604264768481735145873508846925735521695159p=189239861511125143212536989589123569301q=386123125371923651191219869811293586459e=65537c=28767758880940662779934612526152562406674613203406706867456395986985664083182phi=(p-1)*(q-1)d=gmpy2.invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m)) 得到flag: b&#x27;wctf2020&#123;just_@_piece_0f_cak3&#125;&#x27;","path":"2022/08/16/buuctf-6/"},{"title":"BUUCTF-Crypto-Wp 41~50","text":"41 rsa2N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085import hashlibflag = &quot;flag&#123;&quot; + hashlib.md5(hex(d)).hexdigest() + &quot;&#125;&quot; 题目的意思是求d 通过在线工具分解求出p和q，脚本： import hashlibimport gmpy2N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085p=9046853915223503351787031888977627106934564043204783593118678181991596316582877057556463152579621699010610569526573031954779520781448550677767565207407183q=11273732364123571293429600400343309403733952146912318879993851141423284675797325272321856863528776914709992821287788339848962916204774010644058033316303937phi=(p-1)*(q-1)d=gmpy2.invert(e,phi)d=hex(d)flag = &quot;flag&#123;&quot; + hashlib.md5(b&#x27;0x13b8f87d588e2aa4a27296cf2898f56ab4c8deb5a1222ec080e23afecaf7f975L&#x27;).hexdigest() + &quot;&#125;&quot;print(flag)print(d) 由于python3和python2的hex(d)末尾相差了一个”L”第一次提交错误，第二次补上”L”就通过了，output如下： flag&#123;47bf28da384590448e0b0d23909a25a4&#125;0x13b8f87d588e2aa4a27296cf2898f56ab4c8deb5a1222ec080e23afecaf7f975 得到flag 42 达芬奇密码达芬奇隐藏在蒙娜丽莎中的数字列:1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711 记录在达芬奇窗台口的神秘数字串:36968853882116725547342176952286 观察分析数字列就能发现这是个斐波那契数列，但是顺序被打乱了，题目说是送分题，密文也应该是对应的顺序，直接将位置回调： a = &quot;0 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309&quot;b = &quot;0 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711&quot;m = &#x27;36968853882116725547342176952286&#x27;a=a.split(&#x27; &#x27;)b=b.split(&#x27; &#x27;)flag=&#x27;&#x27;for i in range(len(a)): for j in range(len(a)): if a[i]==b[j]: flag+=m[j]print(flag) 得到flag: 37995588256861228614165223347687 43 RSA5m = xxxxxxxxe = 65537========== n c ==========n = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207c = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320n = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759c = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855n = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491c = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862n = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751c = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613n = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067c = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357n = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369c = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932n = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137c = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179n = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191c = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006n = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941c = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934n = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491c = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869n = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019c = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467n = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299c = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971n = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551c = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175n = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987c = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457n = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837c = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842n = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451c = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724n = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499c = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024n = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973c = 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887n = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603c = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889n = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659c = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346 给了很多组n和c，但是通过在线工具都无法拆出p和q，突然意识到他们的m都是相等的，可以用两组的n求最大公约数得到p，脚本： from gmpy2 import *from Crypto.Util.number import *def gcd(x, y): if y &gt; x: x, y = y, x # y为较小值 while(x % y != 0): #上面的比较大小也可以省略，因为如果x较小，第一次进while循环后也会交换xy a=x%y x=y y=a return ye = 65537n1 = c1 = n2 = c2 = n3 = c3 = n4 = c4 = n5 = c5 = n6 = c6 = n7 = c7 = n8 = c8 = n9 = c9 = n10 = c10 = n11 = c11 = n12 = c12 = n13= c13 = n14 = c14 = n15 = c15 = n16 = c16 = n17 = c17 = n18 = c18 = n19 = c19 = n20 = c20 = n=[n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20]for i in range(len(n)): for j in range(i+1,len(n)): if(gcd(n[i],n[j])!=1): print(i,j) N=n[i] p=gcd(n[i],n[j]) print(&#x27;p=&#x27;,p) print(&#x27;n=&#x27;,N)q=N//pphi=(p-1)*(q-1)d=gmpy2.invert(e,phi)m=pow(c5,d,N)print(long_to_bytes(m)) 最终解出的i和j任选一个即可，我选的是i，对应的密文应为c5， output： 4 17p= 132585806383798600305426957307612567604223562626764190211333136246643723811046149337852966828729052476725552361132437370521548707664977123165279305052971868012755509160408641100548744046621516877981864180076497524093201404558036301820216274968638825245150755772559259575544101918590311068466601618472464832499n= 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067b&#x27;flag&#123;abdcbe5fd94e23b3de429223ab9c2fdf&#125;&#x27; 得到flag 44 ROT破解下面的密文：83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112flag格式flag&#123;&#125; 很明显是ascii码，但题目又与rot有关，先rot13再转码看看输出： c = &quot;83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112&quot;c = c.split(&quot; &quot;)flag = &quot;&quot;for i in c: i = int(i) - 13 flag += chr(i)print(flag) Output: FLAG IS flag&#123;www_shiyanbar_com_is_very_good_????&#125;MD5:38e4c352809e150186920aac37190cbc 可以看到flag显示并不完全，给了一串md5，应该是要爆破解出???? 脚本： import hashlibflag=&#x27;flag&#123;www_shiyanbar_com_is_very_good_????&#125;&#x27;md5=&#x27;38e4c352809e150186920aac37190cbc&#x27;for i in range(33,127): for j in range(33,127): for k in range(33,127): for n in range (33,127): cry=flag.replace(&quot;????&quot;,chr(i)+chr(j)+chr(k)+chr(n)) a= hashlib.md5() a.update(cry.encode()) if a.hexdigest() == md5: print(cry) Output: flag&#123;www_shiyanbar_com_is_very_good_@8Mu&#125; 得到flag 45 [WUSTCTF2020]佛说：只能四天尊即寂修我劫修如婆愍闍嚤婆莊愍耨羅嚴是喼婆斯吶眾喼修迦慧迦嚩喼斯願嚤摩隸所迦摩吽即塞願修咒莊波斯訶喃壽祗僧若即亦嘇蜜迦須色喼羅囉咒諦若陀喃慧愍夷羅波若劫蜜斯哆咒塞隸蜜波哆咤慧聞亦吽念彌諸嘚嚴諦咒陀叻咤叻諦缽隸祗婆諦嚩阿兜宣囉吽色缽吶諸劫婆咤咤喼愍尊寂色缽嘚闍兜阿婆若叻般壽聞彌即念若降宣空陀壽愍嚤亦喼寂僧迦色莊壽吽哆尊僧喼喃壽嘚兜我空所吶般所即諸吽薩咤諸莊囉隸般咤色空咤亦喃亦色兜哆嘇亦隸空闍修眾哆咒婆菩迦壽薩塞宣嚩缽寂夷摩所修囉菩阿伏嘚宣嚩薩塞菩波吶波菩哆若慧愍蜜訶壽色咒兜摩缽摩諦劫諸陀即壽所波咤聞如訶摩壽宣咤彌即嚩蜜叻劫嘇缽所摩闍壽波壽劫修訶如嚩嘇囉薩色嚤薩壽修闍夷闍是壽僧劫祗蜜嚴嚩我若空伏諦念降若心吽咤隸嘚耨缽伏吽色寂喃喼吽壽夷若心眾祗喃慧嚴即聞空僧須夷嚴叻心願哆波隸塞吶心須嘇摩咤壽嘚吶夷亦心亦喃若咒壽亦壽囑囑 一眼与佛论禅，旧佛没结果，求了新佛之后： 平等文明自由友善公正自由诚信富强自由自由平等民主平等自由自由友善敬业平等公正平等富强平等自由平等民主和谐公正自由诚信平等和谐公正公正自由法治平等法治法治法治和谐和谐平等自由和谐自由自由和谐公正自由敬业自由文明和谐平等自由文明和谐平等和谐文明自由和谐自由和谐和谐平等和谐法治公正诚信平等公正诚信民主自由和谐公正民主平等平等平等平等自由和谐和谐和谐平等和谐自由诚信平等和谐自由自由友善敬业平等和谐自由友善敬业平等法治自由法治和谐和谐自由友善公正法治敬业公正友善爱国公正民主法治文明自由民主平等公正自由法治平等文明平等友善自由平等和谐自由友善自由平等文明自由民主自由平等平等敬业自由平等平等诚信富强平等友善敬业公正诚信平等公正友善敬业公正平等平等诚信平等公正自由公正诚信平等法治敬业公正诚信平等法治平等公正友善平等公正诚信自由公正友善敬业法治法治公正公正公正平等公正诚信自由公正和谐公正平等 社会主义核心价值观编码： RLJDQTOVPTQ6O6duws5CD6IB5B52CC57okCaUUC3SO4OSOWG3LynarAVGRZSJRAEYEZ_ooe_doyouknowfence 提示是栅栏解密，栏目4解密结果： R5UALCUVJDCGD63RQISZTBOSO54JVBORP5SAT2OEQCWY6CGEO53Z67L_doyouknowCaesar_ 凯撒后没得到像样的明文，看到这个字符集，尝试base32解密： wctf2020&#123;ni_hao_xiang_xiang_da_wo&#125; 得到flag 46 这是什么题目附件是个apk文件，给了提示，把后缀改txt后打开得到一段jsfuck编码 [][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+!+[]]]+(![]+[])[+!+[]]+[+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+[]]+([][[]]+[])[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]]+[+[]]+(+(+!+[]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+[]])+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[+[]]+[!+[]+!+[]]+[+[]]+[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[])[+!+[]]+[!+[]+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]])+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])() 粘贴到控制台解码： flag&#123;a0448fd730b62c13ca80200c4529daa2&#125; 得到flag 47 [NCTF2019]childRSAfrom random import choicefrom Crypto.Util.number import isPrime, sieve_base as primesfrom flag import flagdef getPrime(bits): while True: n = 2 while n.bit_length() &lt; bits: n *= choice(primes) if isPrime(n + 1): return n + 1e = 0x10001m = int.from_bytes(flag.encode(), &#x27;big&#x27;)p, q = [getPrime(2048) for _ in range(2)]n = p * qc = pow(m, e, n)# n = 32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513# c = 26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108 给了c和n，直接正常流程走一遍： 先分解n，求p与q，再正常解RSA： import gmpy2from Crypto.Util.number import *np=178449493212694205742332078583256205058672290603652616240227340638730811945224947826121772642204629335108873832781921390308501763661154638696935732709724016546955977529088135995838497476350749621442719690722226913635772410880516639651363626821442456779009699333452616953193799328647446968707045304702547915799734431818800374360377292309248361548868909066895474518333089446581763425755389837072166970684877011663234978631869703859541876049132713490090720408351108387971577438951727337962368478059295446047962510687695047494480605473377173021467764495541590394732685140829152761532035790187269724703444386838656193674253139q=184084121540115307597161367011014142898823526027674354555037785878481711602257307508985022577801782788769786800015984410443717799994642236194840684557538917849420967360121509675348296203886340264385224150964642958965438801864306187503790100281099130863977710204660546799128755418521327290719635075221585824217487386227004673527292281536221958961760681032293340099395863194031788435142296085219594866635192464353365034089592414809332183882423461536123972873871477755949082223830049594561329457349537703926325152949582123419049073013144325689632055433283354999265193117288252918515308767016885678802217366700376654365502867e=65537cphi=(p-1)*(q-1)d=gmpy2.invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m)) Output: b&#x27;NCTF&#123;Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3&#125;&#x27; 得到flag 48 [MRCTF2020]古典密码知多少 各种密码，猪圈密码、圣堂武士密码、标准银河字母，解密后： FGCPFLIRTUASYON buy some fence对应栅栏解密，解密后： FLAGISCRYPTOFUN 得到flag 49 [HDCTF2019]bbbbbbrsafrom base64 import b64encode as b32encodefrom gmpy2 import invert,gcd,irootfrom Crypto.Util.number import *from binascii import a2b_hex,b2a_heximport randomflag = &quot;******************************&quot;nbit = 128p = getPrime(nbit)q = getPrime(nbit)n = p*qprint pprint nphi = (p-1)*(q-1)e = random.randint(50000,70000)while True: if gcd(e,phi) == 1: break; else: e -= 1;c = pow(int(b2a_hex(flag),16),e,n)print b32encode(str(c))[::-1]# 2373740699529364991763589324200093466206785561836101840381622237225512234632 文件名是encode，说明这是加密时的脚本，读一下代码就知道这是将c转base64后倒序输出，e没给出，只给了n和p p = 177077389675257695042507998165006460849n = 37421829509887796274897162249367329400988647145613325367337968063341372726061c = ==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM 不知道e的情况下可以暴力枚举出来，由于输出格式是‘flag{*}’所以我们只需要查找flag就行： from gmpy2 import gcd,invertfrom Crypto.Util.number import *import base64p=177077389675257695042507998165006460849n=37421829509887796274897162249367329400988647145613325367337968063341372726061q=211330365658290458913359957704294614589c=&#x27;==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM&#x27;[::-1]#倒序输出c=int(str(base64.b64decode(c), &#x27;utf-8&#x27;))#base64解码后转intphi=(p-1)*(q-1)for e in range(50000,70000):#暴力枚举e if gcd(e,phi)==1: d=invert(e,phi) m=str(long_to_bytes(pow(c,d,n))) if &#x27;flag&#x27; in m: print(m,e) 得到flag和e： b&#x27;flag&#123;rs4_1s_s1mpl3!#&#125;&#x27; 51527 50 传感器(曼彻斯特编码)5555555595555A65556AA696AA6666666955这是某压力传感器无线数据包解调后但未解码的报文(hex) 已知其ID为0xFED31F，请继续将报文完整解码，提交hex。提示1：曼联 曼联全程曼彻斯特联，经百度后这是个曼彻斯特编码，有两种对应的关系： ​ 第一种G. E. Thomas, Andrew S. Tanenbaum1949年提出的，它规定0是由低-高的电平跳变表示，1是高-低的电平跳变。 按此规则有： 编码0101（0x5），表示原数据为00； 编码1001（0x9）表示10； 编码0110（0x6）表示01； 编码1010（0xA）表示11。 ​ 第二种IEEE 802.4（令牌总线）和低速版的IEEE 802.3（以太网）中规定, 按照这样的说法, 低-高电平跳变表示1, 高-低的电平跳变表示0 按此规则有： 编码0101（0x5）表示11； 编码1001（0x9）表示01； 编码0110（0x6）表示10； 编码1010（0xA）表示00； 又由于按照IEEE关于令牌环或者以太网的规定，网络字节序是大端序，所以应该反转后解码（即八位倒序传输协议，需要将二进制每八位reverse）脚本如下： a=&#x27;5555555595555A65556AA696AA6666666955&#x27;res=&#x27;&#x27;for i in a: if i ==&#x27;5&#x27;: res+=&#x27;0101 &#x27; if i ==&#x27;9&#x27;: res+=&#x27;1001 &#x27; if i ==&#x27;6&#x27;: res+=&#x27;0110 &#x27; if i ==&#x27;A&#x27;: res+=&#x27;1010 &#x27;def strReverse(strdemo):#倒序函数 strList=[] for i in range(len(strdemo)-1,-1,-1): strList.append(strdemo[i]) return &#x27;&#x27;.join(strList)flag=&#x27;&#x27;flag1=&#x27;&#x27;res=res.split(&#x27; &#x27;)for n in res: if n ==&#x27;0101&#x27;: flag+=&#x27;11&#x27; flag1+=&#x27;00&#x27; if n ==&#x27;0110&#x27;: flag+=&#x27;10&#x27; flag1+=&#x27;01&#x27; if n ==&#x27;1001&#x27;: flag+=&#x27;01&#x27; flag1+=&#x27;10&#x27; if n == &#x27;1010&#x27;: flag+=&#x27;00&#x27; flag1+=&#x27;11&#x27;temp=0res1=&#x27;&#x27;for i in range (len(flag)):#拆分八位 res1+=flag[i] temp+=1 if temp %8 == 0: res1+=&#x27; &#x27;res1=res1.split(&#x27; &#x27;)# print(res1)res2=&#x27;&#x27;for m in range(len(res1)):#八位倒序 # res2+=strReverse(res1[m]) res2+=res1[m][::-1]print(res2)temp1=0#flag1拆分、倒序res3=&#x27;&#x27;res4=&#x27;&#x27;for c in range(len(flag1)): res3+=flag1[c] temp1+=1 if temp%8 == 0: res3+=&#x27; &#x27;res3=res3.split(&#x27; &#x27;)for l in range(len(res3)): res4+=res3[l][::-1]print(res4)print(hex(int(res2,2)).upper(),hex(int(res4,2)).upper())#解码 Output: 1111111111111111111111101101001100011111011001000101000001010101111110010000000000000000100000000011010000000111110110011111010101010101011000000XFFFFFED31F645055F9 0X803407D9F55560 故flag为： flag&#123;FFFFFED31F645055F9&#125;","path":"2022/08/16/buuctf-5/"},{"title":"BUUCTF-Crypto-Wp 31~40","text":"31 RSA下载能得到两个文件，分别是pub.key和flag.enc，尝试了一下打开，发现只有pub.key文件能打开，而flag.enc为二进制文件，pub中内容应是e和n，通过python脚本分解： from Crypto.PublicKey import RSAwith open(&#x27;pub.key&#x27;,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as file: text=file.read()key=RSA.import_key(text)e=key.en=key.nprint(e)print(n) 结果： 6553786934482296048119190666062003494800588905656017203025617216654058378322103517 得到 p=285960468890451637935629440372639283459q=304008741604601924494328155975272418463 开始解密，完整脚本： import gmpy2from Crypto.Util.number import *from Crypto.PublicKey import RSAwith open(&#x27;pub.key&#x27;,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as file: text=file.read()key=RSA.import_key(text)e=key.en=key.np=285960468890451637935629440372639283459q=304008741604601924494328155975272418463phi=(p-1)*(q-1)d=gmpy2.invert(e,phi)with open(&#x27;flag.enc&#x27;,&#x27;rb&#x27;) as file: c=file.read()flag=pow(int.from_bytes(c,byteorder=&#x27;big&#x27;),d,n)#将最优有意义的字节放在字节数组的开头print(long_to_bytes(flag)) Output: b&#x27;\\x02\\x9d &#123;zR\\x1e\\x08\\xe4\\xe6\\x18\\x06\\x00flag&#123;decrypt_256&#125;\\n&#x27; 得到flag 32 RSAROLL两个文件： 题目： RSA roll！roll！roll！Only number and a-z（don&#x27;t use editorwhich MS provide） Data: &#123;920139713,19&#125;70479679275221115227470416418414022368270835483295235263072905459788476483295235459788476663551792475206804459788476428313374475206804459788476425392137704796792458265677341524652483295235534149509425392137428313374425392137341524652458265677263072905483295235828509797341524652425392137475206804428313374483295235475206804459788476306220148 题目给的提示是roll，根据给的data，920139713,19应该是n和e，那下面就是c了，直接用拼接法解flag试试，脚本： from Crypto.Util.number import *import gmpy2n=920139713e=19p=18443q=49891#http://www.factordb.com/phi=(p-1)*(q-1)d=gmpy2.invert(e,phi)list=[704796792,752211152,274704164,18414022,368270835,483295235,263072905,459788476,483295235,459788476,663551792,475206804,459788476,428313374,475206804,459788476,425392137,704796792,458265677,341524652,483295235,534149509,425392137,428313374,425392137,341524652,458265677,263072905,483295235,828509797,341524652,425392137,475206804,428313374,483295235,475206804,459788476,306220148]flag=&#x27;&#x27;for i in list: c=i m=pow(c,d,n) flag+=long_to_bytes(m).decode()print(flag) output: flag&#123;13212je2ue28fy71w8u87y31r78eu1e2&#125; 得到flag 33 dangerous rsa#n: 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793#e: 0x3#c:0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365so,how to get the message? 题目给出了n，c，e，但是n过大，难以拆分p与q，但是公钥e=3，可以直接针对小加密指数e进行攻击， m^{e}n(可令m^{e}=c+kn,则m可以由(c+kn)开3次方得到)解题脚本： import gmpy2import binasciin=0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793e=0x3c=0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365k = 0#穷举k法while(True): #gmpy2.iroot(x,n) x开n次方根 #返回值m为开方计算结果，f为bool变量，标识x能否被开方 m, f = gmpy2.iroot(c+k*n, e) if f: m = hex(m)[2:] flag = binascii.unhexlify(m) print(flag) break k += 1 output： flag&#123;25df8caf006ee5db94d48144c33b2c3b&#125; 得到flag 关于unhexlify和hexlify： 在binascii库中，作用： BIN转HEX： 输入： import binascii print(binascii.b2a_hex(&quot;abcdefghijklmn&quot;)) 输出： 6162636465666768696a6b6c6d6e 扩展：hexlify也可以实现同样的效果： binascii.hexlify(&quot;abcdefghijklmn&quot;) HEX转BIN： 输入： import binascii print(binascii.a2b_hex(&quot;61626364&quot;)) 输出： abcd 扩展：unhexlify也可以实现同样的效果： binascii.unhexlify(&quot;61626364&quot;) 34 robomunication文件是一段音频，只有两种声音，猜测是morse密码，记录下来后密文是： .... . .-.. .-.. --- .-- .... .- - .. ... - .... . -.- . -.-- .. - .. ... -... --- --- .--. -... . . .--. 翻译后得： HELLOWHATISTHEKEYITISBOOPBEEP 故flag为： BOOPBEEP 35 Cipher还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu 公平地玩，提示是playfair密码，没给密钥，应该就是playfair了， 密码表： p l a y f i/j r b c d e g h k m n o q s t u v w x z 解密后得到flag： itisnotaproblemhavefun playfair密码：1.选取一个英文字作密钥。除去重复出现的字母。将密钥的字母逐个逐个加入5×5的矩阵内，剩下的空间将未加入的英文字母依a-z的顺序加入。（将Q去除，或将I和J视作同一字。） 2.将要加密的讯息分成两个一组。若组内的字母相同，将X（或Q）插入两字母之间，重新分组（例如 HELLO 将分成 HE LX LO）。若剩下一个字，也加入X字。 在每组中，找出两个字母在矩阵中的地方。 若两个字母不在同一直行或同一横列，在矩阵中找出另外两个字母，使这四个字母成为一个长方形的四个角。 若两个字母在同一横列，取这两个字母右方的字母（若字母在最右方则取最左方的字母）。 若两个字母在同一直行，取这两个字母下方的字母（若字母在最下方则取最上方的字母）。 新找到的两个字母就是原本的两个字母加密的结果。 36 [HDCTF2019]basic rsa题目： import gmpy2from Crypto.Util.number import *from binascii import a2b_hex,b2a_hexflag = &quot;*****************&quot;p = 262248800182277040650192055439906580479q = 262854994239322828547925595487519915551e = 65533n = p*qc = pow(int(b2a_hex(flag),16),e,n)print c# 27565231154623519221597938803435789010285480123476977081867877272451638645710 一道RSA的题目，猜测注释的内容应该是c，正常解法： import gmpy2from Crypto.Util.number import *p = 262248800182277040650192055439906580479q = 262854994239322828547925595487519915551c=27565231154623519221597938803435789010285480123476977081867877272451638645710e = 65533n = p*qphi=(p-1)*(q-1)d=gmpy2.invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m)) 得到flag： flag&#123;B4by_Rs4&#125; 37 [GXYCTF2019]CheckIn题目内容是一串base64编码： dikqTCpfRjA8fUBIMD5GNDkwMjNARkUwI0BFTg== 解码后： v)*L*_F0&lt;&#125;@H0&gt;F49023@FE0#@EN rot47解码： GXY&#123;Y0u_kNow_much_about_Rot&#125; 得到flag 38 [GUET-CTF2019]BabyRSA一道RSA的题： p+q : 0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea(p+1)(q+1) : 0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740e : 0xe6b1bee47bd63f615c7d0a43c529d219d : 0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5enc_flag : 0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a 给了p+q和(p+1)(q+1)能解出n： import binasciia=0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2eab=0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740n=b-a-1c=0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9ad=0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5m=pow(c,d,n)m = hex(m)[2:]flag = binascii.unhexlify(m)print(flag) 得到flag: flag&#123;cc7490e-78ab-11e9-b422-8ba97e5da1fd&#125; 39 密码学的心声题目内容是一张曲谱： 编写脚本转字符串： str=&#x27;111 114 157 166 145 123 145 143 165 162 151 164 171 126 145 162 171 115 165 143 150&#x27;str1=str.split(&#x27; &#x27;)result=&#x27;&#x27;for i in str1: result+=chr(int(i,8))print(result) 得到flag: ILoveSecurityVeryMuch 40 [BJDCTF2020]这是base??dict:&#123;0: &#x27;J&#x27;, 1: &#x27;K&#x27;, 2: &#x27;L&#x27;, 3: &#x27;M&#x27;, 4: &#x27;N&#x27;, 5: &#x27;O&#x27;, 6: &#x27;x&#x27;, 7: &#x27;y&#x27;, 8: &#x27;U&#x27;, 9: &#x27;V&#x27;, 10: &#x27;z&#x27;, 11: &#x27;A&#x27;, 12: &#x27;B&#x27;, 13: &#x27;C&#x27;, 14: &#x27;D&#x27;, 15: &#x27;E&#x27;, 16: &#x27;F&#x27;, 17: &#x27;G&#x27;, 18: &#x27;H&#x27;, 19: &#x27;7&#x27;, 20: &#x27;8&#x27;, 21: &#x27;9&#x27;, 22: &#x27;P&#x27;, 23: &#x27;Q&#x27;, 24: &#x27;I&#x27;, 25: &#x27;a&#x27;, 26: &#x27;b&#x27;, 27: &#x27;c&#x27;, 28: &#x27;d&#x27;, 29: &#x27;e&#x27;, 30: &#x27;f&#x27;, 31: &#x27;g&#x27;, 32: &#x27;h&#x27;, 33: &#x27;i&#x27;, 34: &#x27;j&#x27;, 35: &#x27;k&#x27;, 36: &#x27;l&#x27;, 37: &#x27;m&#x27;, 38: &#x27;W&#x27;, 39: &#x27;X&#x27;, 40: &#x27;Y&#x27;, 41: &#x27;Z&#x27;, 42: &#x27;0&#x27;, 43: &#x27;1&#x27;, 44: &#x27;2&#x27;, 45: &#x27;3&#x27;, 46: &#x27;4&#x27;, 47: &#x27;5&#x27;, 48: &#x27;6&#x27;, 49: &#x27;R&#x27;, 50: &#x27;S&#x27;, 51: &#x27;T&#x27;, 52: &#x27;n&#x27;, 53: &#x27;o&#x27;, 54: &#x27;p&#x27;, 55: &#x27;q&#x27;, 56: &#x27;r&#x27;, 57: &#x27;s&#x27;, 58: &#x27;t&#x27;, 59: &#x27;u&#x27;, 60: &#x27;v&#x27;, 61: &#x27;w&#x27;, 62: &#x27;+&#x27;, 63: &#x27;/&#x27;, 64: &#x27;=&#x27;&#125;chipertext:FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw 看题目内容应该是把base64的字典换了，直接上脚本： import base64#新字典：dict=&#123;0: &#x27;J&#x27;, 1: &#x27;K&#x27;, 2: &#x27;L&#x27;, 3: &#x27;M&#x27;, 4: &#x27;N&#x27;, 5: &#x27;O&#x27;, 6: &#x27;x&#x27;, 7: &#x27;y&#x27;, 8: &#x27;U&#x27;, 9: &#x27;V&#x27;, 10: &#x27;z&#x27;, 11: &#x27;A&#x27;, 12: &#x27;B&#x27;, 13: &#x27;C&#x27;, 14: &#x27;D&#x27;, 15: &#x27;E&#x27;, 16: &#x27;F&#x27;, 17: &#x27;G&#x27;, 18: &#x27;H&#x27;, 19: &#x27;7&#x27;, 20: &#x27;8&#x27;, 21: &#x27;9&#x27;, 22: &#x27;P&#x27;, 23: &#x27;Q&#x27;, 24: &#x27;I&#x27;, 25: &#x27;a&#x27;, 26: &#x27;b&#x27;, 27: &#x27;c&#x27;, 28: &#x27;d&#x27;, 29: &#x27;e&#x27;, 30: &#x27;f&#x27;, 31: &#x27;g&#x27;, 32: &#x27;h&#x27;, 33: &#x27;i&#x27;, 34: &#x27;j&#x27;, 35: &#x27;k&#x27;, 36: &#x27;l&#x27;, 37: &#x27;m&#x27;, 38: &#x27;W&#x27;, 39: &#x27;X&#x27;, 40: &#x27;Y&#x27;, 41: &#x27;Z&#x27;, 42: &#x27;0&#x27;, 43: &#x27;1&#x27;, 44: &#x27;2&#x27;, 45: &#x27;3&#x27;, 46: &#x27;4&#x27;, 47: &#x27;5&#x27;, 48: &#x27;6&#x27;, 49: &#x27;R&#x27;, 50: &#x27;S&#x27;, 51: &#x27;T&#x27;, 52: &#x27;n&#x27;, 53: &#x27;o&#x27;, 54: &#x27;p&#x27;, 55: &#x27;q&#x27;, 56: &#x27;r&#x27;, 57: &#x27;s&#x27;, 58: &#x27;t&#x27;, 59: &#x27;u&#x27;, 60: &#x27;v&#x27;, 61: &#x27;w&#x27;, 62: &#x27;+&#x27;, 63: &#x27;/&#x27;, 64: &#x27;=&#x27;&#125;#标准base64字典：base64_list = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;,&#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,&#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;,&#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;+&#x27;, &#x27;/&#x27;]#密文：chipertext=&#x27;FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw&#x27;flag=&#x27;&#x27;for i in range(len(chipertext)): for j in range(64): if dict[j]==chipertext[i]: flag+=base64_list[j]print(base64.b64decode(flag)) 得到flag: BJD&#123;D0_Y0u_kNoW_Th1s_b4se_map&#125;","path":"2022/08/16/buuctf-4/"},{"title":"BUUCTF-Crypto-Wp 21~30","text":"21 RSA1p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 一道RSA解密的题目由以下公式： m_1=C^{dp}\\,mod\\,p \\\\ m_2=C^{dq}\\,mod\\,q \\\\ m=(((m_1-m_2)*I)\\,mod\\,p)*q+m_2 \\\\ 其中I为q模p的逆元编写python脚本就是： import gmpy2p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852I = gmpy2.invert(q,p)mp = pow(c,dp,p)mq = pow(c,dq,q) #求幂取模运算m = (((mp-mq)*I)%p)*q+mq #求明文公式def to_ascii(h):#转ascii list_s = [] for i in range(2, len(h), 2): list_s.append(chr(int(h[i:i+2], 16))) return &#x27;&#x27;.join(list_s) result=to_ascii(hex(m))print(result) output： noxCTF&#123;W31c0m3_70_Ch1n470wn&#125; 得到flag 22 权限获得第一步你猜这是什么东西，记得破解后把其中的密码给我。答案为非常规形式。题目：Administrator:500:806EDC27AA52E314AAD3B435B51404EE:F4AD50F57683D4260DFD48AA351A17A8::: 与第16题相似，先尝试md5解码，答案为非常规形式，故都提交试试。 第一段解码出来要收费，第二段明文是： 3617656 作为flag提交后提示正确 23 old-fashion没拿到题就知道是古典密码了。 Os drnuzearyuwn, y jtkjzoztzoes douwlr oj y ilzwex eq lsdexosa kn pwodw tsozj eq ufyoszlbz yrl rlufydlx pozw douwlrzlbz, ydderxosa ze y rlatfyr jnjzli; mjy gfbmw vla xy wbfnsy symmyew (mjy vrwm qrvvrf), hlbew rd symmyew, mebhsymw rd symmyew, vbomgeyw rd mjy lxrzy, lfk wr dremj. Mjy eyqybzye kyqbhjyew mjy myom xa hyedrevbfn lf bfzyewy wgxwmbmgmbrf. Wr mjy dsln bw f1_2jyf-k3_jg1-vb-vl_l 一串密文，经rot13和rot47解密后无意义，尝试替换密码： Uacjusckuts dgnwv kbw ptdnh. Scftnwts Xtscfcdkw.Xl fogkvryoeksg, e hjdhvxvjvxrl fxksao xh e zavsrb rc alfrbxly dg qsxfs jlxvh rc knexlvaiv eoa oaknefab qxvs fxksaovaiv, effrobxly vr e oayjneo hghvaz; the units may be single letters (the most common), pairs of letters, triplets of letters, mixtures of the above, and so forth. The receiver deciphers the text by performing an inverse substitution. So the flag is n1_2hen-d3_hu1-mi-ma_a 得到flag： n1_2hen-d3_hu1-mi-ma_a 24 世上无难事题目：以下是某国现任总统外发的一段指令，经过一种奇异的加密方式，毫无规律，看来只能分析了。请将这段语句还原成通顺语句，并从中找到key作为答案提交，答案是32位，包含小写字母。密文：VIZZB IFIUOJBWO NVXAP OBC XZZ UKHVN IFIUOJBWO HB XVIXW XAW VXFI X QIXN VBD KQ IFIUOJBWO WBKAH NBWXO VBD XJBCN NKG QLKEIU DI XUI VIUI DKNV QNCWIANQ XN DXPIMKIZW VKHV QEVBBZ KA XUZKAHNBA FKUHKAKX XAW DI VXFI HBN QNCWIANQ NCAKAH KA MUBG XZZ XEUBQQ XGIUKEX MUBG PKAWIUHXUNIA NVUBCHV 12NV HUXWI XAW DI XUI SCQN QB HZXW NVXN XZZ EBCZW SBKA CQ NBWXO XAW DI DXAN NB NVXAP DXPIMKIZW MBU JIKAH QCEV XA BCNQNXAWKAH VBQN HKFI OBCUQIZFIQ X JKH UBCAW BM XLLZXCQI XAW NVI PIO KQ 640I11012805M211J0XJ24MM02X1IW09 与23有些类似，再次尝试替换密码： HELLO EVERYBODY THANK YOU ALL RIGHT EVERYBODY GO AHEAD AND HAVE A SEAT HOW IS EVERYBODY DOING TODAY HOW ABOUT TIM SPICER WE ARE HERE WITH STUDENTS AT WAKEFIELD HIGH SCHOOL IN ARLINGTON VIRGINIA AND WE HAVE GOT STUDENTS TUNING IN FROM ALL ACROSS AMERICA FROM KINDERGARTEN THROUGH 12TH GRADE AND WE ARE JUST SO GLAD THAT ALL COULD JOIN US TODAY AND WE WANT TO THANK WAKEFIELD FOR BEING SUCH AN OUTSTANDING HOST GIVE YOURSELVES A BIG ROUND OF APPLAUSE AND THE KEY IS 640E11012805F211B0AB24FF02A1ED09 题目提示包含小写字母，将key化成小写即得到flag 640e11012805f211b0ab24ff02a1ed09 25 RSA3c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801e1=11187289c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397e2=9647291 已知c1，c2，e1，e2，n，可用RSA共模攻击得到明文M，python脚本如： import gmpy2from Crypto.Util import numberc1=c2=e1=e2=n=def rsa_gong_N_def(e1,e2,c1,c2,n):#共模攻击解m e1, e2, c1, c2, n=int(e1),int(e2),int(c1),int(c2),int(n) print(&quot;e1,e2:&quot;,e1,e2) print(gmpy2.gcd(e1,e2)) s = gmpy2.gcdext(e1, e2) print(s) s1 = s[1] s2 = s[2] if s1 &lt; 0: s1 = - s1 c1 = gmpy2.invert(c1, n) elif s2 &lt; 0: s2 = - s2 c2 = gmpy2.invert(c2, n) m = (pow(c1,s1,n) * pow(c2 ,s2 ,n)) % n return int(m) m = rsa_gong_N_def(e1,e2,c1,c2,n)print(number.long_to_bytes(m))#正整数转bytes字符串输出 得到flag： flag&#123;49d91077a1abcb14f1a9d546c80be9ef&#125; 26 RSA2密文中只有c，e，n，和dp，应该是dp泄露，编写python解m： import gmpy2from Crypto.Util import numbere = 65537n = dp = c = for x in range(1, e): if(e*dp%x==1): p=(e*dp-1)//x+1 if(n%p!=0): continue q=n//p#向下取整 phin=(p-1)*(q-1) d=gmpy2.invert(e, phin) m=pow(c, d, n) if(len(hex(m)[2:])%2==1): continue print(number.long_to_bytes(m))#转bytes字符串#可以用hex(m)[2:]来规避转换16进制后前面的0x 得到flag: flag&#123;wow_leaking_dp_breaks_rsa?_98924743502&#125; 27 Unencode89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM] 题目给了提示，肯定和Uuencode有关，解密后： flag&#123;dsdasdsa99877LLLKK&#125; 得到flag 28 [AFCTF2018]Morse-..../.----/-..../-..../-..../...--/--.../....-/-..../-..../--.../-.../...--/.----/--.../...--/..---/--.../--.../....-/...../..-./--.../...--/...--/-----/...../..-./...--/...--/...--/....-/...--/...../--.../----./--.../-.. 摩斯解码后： 61666374667B317327745F73305F333435797D 第一次提交还以为解码后就是flag，提示错误后观察解码结果，发现字母不超过f，进行字符串转换后： afctf&#123;1s&#x27;t_s0_345y&#125; 得到flag 29 异性相吸题目给的提示应该是与异或加密有关，两个文件分别是密文与key： 密文：ἇ̀Ј唒ဃ塔屋䩘卖剄䐃堂ن䝔嘅均ቄ䩝ᬔ key：asadsasdasdasdasdasdasdasdasdasdqwesqf 思路是都转16进制，然后转二进制再转整型利用异或运算符进行运算，以字符串模式保存并拼接： 转16进制： 用Hex Fiend打开相应的文档： python脚本： hex1 = &#x27;61736164 73617364 61736461 73646173 64617364 61736461 73646173 64617364 71776573 7166&#x27;hex2 = &#x27;071F0003 08041255 03105458 4B5C584A 56534452 03440258 46065447 05564757 44125D4A 141B&#x27;def hextobin(hex): bin = &#x27;&#x27; for i in hex: if i == &#x27;0&#x27;: bin += &#x27;0000&#x27; if i == &#x27;1&#x27;: bin += &#x27;0001&#x27; if i == &#x27;2&#x27;: bin += &#x27;0010&#x27; if i == &#x27;3&#x27;: bin += &#x27;0011&#x27; if i == &#x27;4&#x27;: bin += &#x27;0100&#x27; if i == &#x27;5&#x27;: bin += &#x27;0101&#x27; if i == &#x27;6&#x27;: bin += &#x27;0110&#x27; if i == &#x27;7&#x27;: bin += &#x27;0111&#x27; if i == &#x27;8&#x27;: bin += &#x27;1000&#x27; if i == &#x27;9&#x27;: bin += &#x27;1001&#x27; if i == &#x27;A&#x27;: bin += &#x27;1010&#x27; if i == &#x27;B&#x27;: bin += &#x27;1011&#x27; if i == &#x27;C&#x27;: bin += &#x27;1100&#x27; if i == &#x27;D&#x27;: bin += &#x27;1101&#x27; if i == &#x27;E&#x27;: bin += &#x27;1110&#x27; if i == &#x27;F&#x27;: bin += &#x27;1111&#x27; if i == &#x27; &#x27;: pass return binbin1 = hextobin(hex1)bin2 = hextobin(hex2)bin3 = &#x27;&#x27;for i in range(len(bin1)): bin3 += str(int(bin1[i]) ^ int(bin2[i]))print(bin3) output: 0110011001101100011000010110011101111011011001010110000100110001011000100110001100110000001110010011100000111000001110010011100100110010001100100011011100110110011000100011011101100110001110010011010101100010001101010011010001100001001101110011010000110011001101010110010100111000001110010110010101111101 转字符串后： flag&#123;ea1bc0988992276b7f95b54a7435e89e&#125; 得到flag 30 还原大师我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的32位MD5码。但是我们获得它的32位MD5码也是残缺不全，E903???4DAB????08?????51?80??8A?,请猜出神秘字符串的原本模样，并且提交这个字串的32位MD5码作为答案。 思路很简单，穷举‘神秘字符串’中所有的可能进行md5转码后对比一下前四位就能取到明文，上脚本： import hashlibfrom string import ascii_uppercase, hexdigitsstr=ascii_uppercaseflag=&#x27;&#x27;for i in str: for j in str: for k in str: flag=&#x27;TASC&#x27;+i+&#x27;O3RJMV&#x27;+j+&#x27;WDJKX&#x27;+k+&#x27;ZM&#x27; m= hashlib.md5() m.update(flag.encode(&#x27;utf-8&#x27;)) result= m.hexdigest() if result[0:4] == &#x27;e903&#x27;: print(flag) exit() else: print(result[0:4]) pass 得到明文是： TASCJO3RJMVKWDJKXLZMmd5:E9032994DABAC08080091151380478A2 得到flag","path":"2022/07/29/buuctf-3/"},{"title":"BUUCTF-Crypto-Wp 11~20","text":"11 RSA题目内容： 在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17求解出d作为flag提交 python写个求d的脚本： import gmpy2p=473398607161q=4511491e=17n=p*qphi=(p-1)*(q-1)d=gmpy2.invert(e,phi)print(d) output： 125631357777427553 得到flag 12 丢失的MD5题目给了个python文件：md5.py: import hashlib for i in range(32,127): for j in range(32,127): for k in range(32,127): m=hashlib.md5() m.update(&#x27;TASC&#x27;+chr(i)+&#x27;O3RJMV&#x27;+chr(j)+&#x27;WDJKX&#x27;+chr(k)+&#x27;ZM&#x27;) des=m.hexdigest() if &#x27;e9032&#x27; in des and &#x27;da&#x27; in des and &#x27;911513&#x27; in des: print(des) 运行后报错： Unicode-objects must be encoded before hashing 得知在进行md5哈希运算前需要先进行编码： 修改代码后： import hashlib for i in range(32,127): for j in range(32,127): for k in range(32,127): m=hashlib.md5() m.update(&#x27;TASC&#x27;.encode(&#x27;utf-8&#x27;)+chr(i).encode(&#x27;utf-8&#x27;)+&#x27;O3RJMV&#x27;.encode(&#x27;utf-8&#x27;)+chr(j).encode(&#x27;utf-8&#x27;)+&#x27;WDJKX&#x27;.encode(&#x27;utf-8&#x27;)+chr(k).encode(&#x27;utf-8&#x27;)+&#x27;ZM&#x27;.encode(&#x27;utf-8&#x27;)) des=m.hexdigest() if &#x27;e9032&#x27; in des and &#x27;da&#x27; in des and &#x27;911513&#x27; in des: print(des) output： e9032994dabac08080091151380478a2 得到flag 13 Alice与Bob题目内容： 密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数:98554799767,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。 得知需要分解一个大整数的质因数，用python实现就是： N=98554799767sqrt = int(N ** 0.5) + 1for v in range(sqrt,3,-2): if N % v == 0: print(&quot;%d = %d * %d&quot; % (N, v, N/v)) break Output: 98554799767 = 101999 * 966233 将结果组合并进行md5的32位小写哈希： d450209323a847c8d01c6be47c81811a 得到flag 14 rsarsaMath is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407e = 65537c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034Use RSA to find the secret message 要求很明显，求明文，用python实现： import gmpy2p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407e = 65537c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034n=p*qphi=(p-1)*(q-1)d=gmpy2.invert(e,phi)M=pow(c,d,n)print(M) Output: 5577446633554466577768879988 得到flag 15 大帝的秘密武器公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。以下密文被解开后可以获得一个有意义的单词：FRPHEVGL你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。 密文： ComeChina 题目提示与凯撒大帝有关，FRPHEVGL解码后明文为：SECURITY 对密文进行加密： PbzrPuvan 得到flag 16 Windows系统密码Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::ctf:1002:06af9108f2e1fecf144e2e8adef09efd:a7fcb22a88038f35a8f39d503e7f0062:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::SUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:bef14eee40dffbc345eeb3f58e290d56::: 不难发现“:”每一段都为32位，进行md5解码尝试后发现前三段都为空，第四段为： good-luck 得到flag 17 信息化时代的步伐也许中国可以早早进入信息化时代，但是被清政府拒绝了。附件中是数十年后一位伟人说的话的密文。请翻译出明文(答案为一串中文！) 密文： 606046152623600817831216121621196386 数字转中文，可能是电码，尝试解码： 得到flag 18 凯撒？替换？呵呵！MTHJ&#123;CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO&#125; 凯撒和替换解码都解不出有意义的明文，google到一个网站https://quipqiup.com/进行自定义的替换解密，将MTHJ替换为FLAG尝试后： flag substitution cipher decryption is always easy just like a piece of cake 故flag为： flag&#123;substitutioncipherdecryptionisalwayseasyjustlikeapieceofcake&#125; 19 传统知识+古典密码小明某一天收到一封密信，信中写了几个不同的年份 辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳。 信的背面还写有“+甲子”，请解出这段密文。 对照六十甲子顺序表可得各个对应数字为： 原码 解码 +甲子 ascii转码 辛卯 28 88 X 癸巳 30 90 Z 丙戌 23 83 S 辛未 8 68 D 庚辰 17 77 M 癸酉 10 70 F 己卯 16 76 L 癸巳 30 90 Z 得到一串密文： XZSDMFLZ 还没用到古典密码，先试试栅栏解密： XMZFSLDZ 再试一下凯撒解密，当移位为5时明文有意义： SHUANGYU 得到flag 20 萌萌哒的八戒题目就一张图，图里一串密文： 一眼猪圈密码，密码表如下： 对照后得到： whenthepigwanttoeat 得到flag","path":"2022/07/29/buuctf-2/"},{"title":"BUUCTF-Crypto-Wp 1~10","text":"1 MD5题目是一串密码： e00cf25ad42683b3df678c61f42c6bda 由题目给出的提示可知，密文经md5加密，解密即可 admin1 2 一眼就解密题目是一串密码： ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30= 一眼base64，进行base64解码后： flag&#123;THE_FLAG_OF_THIS_STRING&#125; 3 Url编码题目是一串密码： %66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d Url解码后得到： flag&#123;and 1=1&#125; 4 看我回旋踢题目是一串密文： synt&#123;5pq1004q-86n5-46q8-o720-oro5on0417r1&#125; 用rot13解密后得到： flag&#123;5cd1004d-86a5-46d8-b720-beb5ba0417e1&#125; 5 摩丝由题可知，本题与摩斯密码有关： .. .-.. --- ...- . -.-- --- ..- 上密码表： 可解码为： I LOVE YOU 6 password题目内容： 姓名：张三 生日：19900315key格式为key&#123;xxxxxxxxxx&#125; 由提示得key为十位密码，只能靠猜： zs19900315 7 变异凯撒题目内容： 加密密文：afZ_r9VYfScOeO_UL^RWUc格式：flag&#123; &#125; 题目提示是凯撒，对应码表后得知移位的位数不断递增，且字典不再是26个字母，扩展到了字符部分： 密文 移位 明文 a 5 f f 6 l Z 7 a _ 8 g r 9 { 可得明文： flag&#123;Caesar_variation&#125; 8 Quoted-printable题目内容： =E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6 给的提示是Quoted-printable，python写个脚本解码： import quopristr = &quot;=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6&quot;a = quopri.decodestring(str).decode(&#x27;utf-8&#x27;)print(a) 输出： 那你也很棒哦 得到flag 9 Rabbit题目是一串密文： U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI rabbit解码： Cute_Rabbit 得到flag 10 篱笆墙的影子题目内容如下： felhaagv&#123;ewtehtehfilnakgw&#125; 篱笆墙的影子，猜测是栅栏密码，解密后： flag&#123;wethinkwehavetheflag&#125;","path":"2022/07/29/buuctf-1/"}],"categories":[],"tags":[]}